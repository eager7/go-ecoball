// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fc.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		fc.proto

	It has these top-level messages:
		FcMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FcMessage struct {
	PublicKey   []byte `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Cid         string `protobuf:"bytes,2,opt,name=Cid,proto3" json:"Cid,omitempty"`
	LocalPath   string `protobuf:"bytes,3,opt,name=LocalPath,proto3" json:"LocalPath,omitempty"`
	FileSize    uint64 `protobuf:"varint,4,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	Redundancy  uint32 `protobuf:"varint,5,opt,name=Redundancy,proto3" json:"Redundancy,omitempty"`
	Funds       []byte `protobuf:"bytes,6,opt,name=Funds,proto3" json:"Funds,omitempty"`
	StartAt     uint64 `protobuf:"varint,7,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	Expiration  uint64 `protobuf:"varint,8,opt,name=Expiration,proto3" json:"Expiration,omitempty"`
	AccountName string `protobuf:"bytes,9,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
}

func (m *FcMessage) Reset()                    { *m = FcMessage{} }
func (m *FcMessage) String() string            { return proto.CompactTextString(m) }
func (*FcMessage) ProtoMessage()               {}
func (*FcMessage) Descriptor() ([]byte, []int) { return fileDescriptorFc, []int{0} }

func (m *FcMessage) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *FcMessage) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *FcMessage) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

func (m *FcMessage) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *FcMessage) GetRedundancy() uint32 {
	if m != nil {
		return m.Redundancy
	}
	return 0
}

func (m *FcMessage) GetFunds() []byte {
	if m != nil {
		return m.Funds
	}
	return nil
}

func (m *FcMessage) GetStartAt() uint64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *FcMessage) GetExpiration() uint64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *FcMessage) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func init() {
	proto.RegisterType((*FcMessage)(nil), "pb.FcMessage")
}
func (m *FcMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FcMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFc(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.Cid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFc(dAtA, i, uint64(len(m.Cid)))
		i += copy(dAtA[i:], m.Cid)
	}
	if len(m.LocalPath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFc(dAtA, i, uint64(len(m.LocalPath)))
		i += copy(dAtA[i:], m.LocalPath)
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFc(dAtA, i, uint64(m.FileSize))
	}
	if m.Redundancy != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFc(dAtA, i, uint64(m.Redundancy))
	}
	if len(m.Funds) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFc(dAtA, i, uint64(len(m.Funds)))
		i += copy(dAtA[i:], m.Funds)
	}
	if m.StartAt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFc(dAtA, i, uint64(m.StartAt))
	}
	if m.Expiration != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFc(dAtA, i, uint64(m.Expiration))
	}
	if len(m.AccountName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintFc(dAtA, i, uint64(len(m.AccountName)))
		i += copy(dAtA[i:], m.AccountName)
	}
	return i, nil
}

func encodeVarintFc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FcMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovFc(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovFc(uint64(l))
	}
	l = len(m.LocalPath)
	if l > 0 {
		n += 1 + l + sovFc(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovFc(uint64(m.FileSize))
	}
	if m.Redundancy != 0 {
		n += 1 + sovFc(uint64(m.Redundancy))
	}
	l = len(m.Funds)
	if l > 0 {
		n += 1 + l + sovFc(uint64(l))
	}
	if m.StartAt != 0 {
		n += 1 + sovFc(uint64(m.StartAt))
	}
	if m.Expiration != 0 {
		n += 1 + sovFc(uint64(m.Expiration))
	}
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovFc(uint64(l))
	}
	return n
}

func sovFc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFc(x uint64) (n int) {
	return sovFc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FcMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FcMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FcMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redundancy", wireType)
			}
			m.Redundancy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Redundancy |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds[:0], dAtA[iNdEx:postIndex]...)
			if m.Funds == nil {
				m.Funds = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fc.proto", fileDescriptorFc) }

var fileDescriptorFc = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x48, 0x4b, 0xd6, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x6a, 0x67, 0xe2, 0xe2, 0x74, 0x4b, 0xf6,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x92, 0xe1, 0xe2, 0x0c, 0x28, 0x4d, 0xca, 0xc9, 0x4c,
	0xf6, 0x4e, 0xad, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x42, 0x08, 0x08, 0x09, 0x70, 0x31,
	0x3b, 0x67, 0xa6, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x20, 0xf5, 0x3e, 0xf9,
	0xc9, 0x89, 0x39, 0x01, 0x89, 0x25, 0x19, 0x12, 0xcc, 0x60, 0x71, 0x84, 0x80, 0x90, 0x14, 0x17,
	0x87, 0x5b, 0x66, 0x4e, 0x6a, 0x70, 0x66, 0x55, 0xaa, 0x04, 0x8b, 0x02, 0xa3, 0x06, 0x4b, 0x10,
	0x9c, 0x2f, 0x24, 0xc7, 0xc5, 0x15, 0x94, 0x9a, 0x52, 0x9a, 0x97, 0x92, 0x98, 0x97, 0x5c, 0x29,
	0xc1, 0xaa, 0xc0, 0xa8, 0xc1, 0x1b, 0x84, 0x24, 0x22, 0x24, 0xc2, 0xc5, 0xea, 0x56, 0x9a, 0x97,
	0x52, 0x2c, 0xc1, 0x06, 0x76, 0x05, 0x84, 0x23, 0x24, 0xc1, 0xc5, 0x1e, 0x5c, 0x92, 0x58, 0x54,
	0xe2, 0x58, 0x22, 0xc1, 0x0e, 0x36, 0x10, 0xc6, 0x05, 0x99, 0xe7, 0x5a, 0x51, 0x90, 0x59, 0x94,
	0x58, 0x92, 0x99, 0x9f, 0x27, 0xc1, 0x01, 0x96, 0x44, 0x12, 0x11, 0x52, 0xe0, 0xe2, 0x76, 0x4c,
	0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0xf1, 0x4b, 0xcc, 0x4d, 0x95, 0xe0, 0x04, 0xbb, 0x15, 0x59, 0xc8,
	0x49, 0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1,
	0x58, 0x8e, 0x21, 0x89, 0x0d, 0x1c, 0x4c, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0xc7,
	0x6b, 0xa7, 0x32, 0x01, 0x00, 0x00,
}

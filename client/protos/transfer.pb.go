// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transfer.proto

/*
	Package protos is a generated protocol buffer package.

	It is generated from these files:
		transfer.proto

	It has these top-level messages:
		Transfer
		Contract
		Transaction
		SignedTransaction
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import pb "github.com/ecoball/go-ecoball/core/pb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 虚拟机类型
type Vmtype int32

const (
	Vmtype_NATIVE Vmtype = 0
	Vmtype_WASM   Vmtype = 1
)

var Vmtype_name = map[int32]string{
	0: "NATIVE",
	1: "WASM",
}
var Vmtype_value = map[string]int32{
	"NATIVE": 0,
	"WASM":   1,
}

func (x Vmtype) String() string {
	return proto.EnumName(Vmtype_name, int32(x))
}
func (Vmtype) EnumDescriptor() ([]byte, []int) { return fileDescriptorTransfer, []int{0} }

// 转账交易结构体
type Transfer struct {
	Version int32  `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	From    string `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To      string `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
	Value   int64  `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *Transfer) Reset()                    { *m = Transfer{} }
func (m *Transfer) String() string            { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()               {}
func (*Transfer) Descriptor() ([]byte, []int) { return fileDescriptorTransfer, []int{0} }

func (m *Transfer) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Transfer) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Transfer) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Transfer) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 合约结构体
type Contract struct {
	Version int32  `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Vmtype  Vmtype `protobuf:"varint,2,opt,name=Vmtype,proto3,enum=protos.Vmtype" json:"Vmtype,omitempty"`
	Address []byte `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	Method  string `protobuf:"bytes,4,opt,name=Method,proto3" json:"Method,omitempty"`
	Args    []byte `protobuf:"bytes,5,opt,name=Args,proto3" json:"Args,omitempty"`
}

func (m *Contract) Reset()                    { *m = Contract{} }
func (m *Contract) String() string            { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()               {}
func (*Contract) Descriptor() ([]byte, []int) { return fileDescriptorTransfer, []int{1} }

func (m *Contract) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Contract) GetVmtype() Vmtype {
	if m != nil {
		return m.Vmtype
	}
	return Vmtype_NATIVE
}

func (m *Contract) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Contract) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Contract) GetArgs() []byte {
	if m != nil {
		return m.Args
	}
	return nil
}

// 交易结构体
type Transaction struct {
	Version  int32     `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Contract *Contract `protobuf:"bytes,2,opt,name=Contract" json:"Contract,omitempty"`
	Time     uint32    `protobuf:"varint,3,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorTransfer, []int{2} }

func (m *Transaction) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Transaction) GetContract() *Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *Transaction) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

// 签名交易
type SignedTransaction struct {
	Transaction *Transaction    `protobuf:"bytes,1,opt,name=Transaction" json:"Transaction,omitempty"`
	Sign        []*pb.Signature `protobuf:"bytes,2,rep,name=Sign" json:"Sign,omitempty"`
	Hash        []byte          `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *SignedTransaction) Reset()                    { *m = SignedTransaction{} }
func (m *SignedTransaction) String() string            { return proto.CompactTextString(m) }
func (*SignedTransaction) ProtoMessage()               {}
func (*SignedTransaction) Descriptor() ([]byte, []int) { return fileDescriptorTransfer, []int{3} }

func (m *SignedTransaction) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *SignedTransaction) GetSign() []*pb.Signature {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *SignedTransaction) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*Transfer)(nil), "protos.Transfer")
	proto.RegisterType((*Contract)(nil), "protos.Contract")
	proto.RegisterType((*Transaction)(nil), "protos.Transaction")
	proto.RegisterType((*SignedTransaction)(nil), "protos.SignedTransaction")
	proto.RegisterEnum("protos.Vmtype", Vmtype_name, Vmtype_value)
}
func (m *Transfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transfer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Version))
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Version))
	}
	if m.Vmtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Vmtype))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Args) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Args)))
		i += copy(dAtA[i:], m.Args)
	}
	return i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Version))
	}
	if m.Contract != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Contract.Size()))
		n1, err := m.Contract.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *SignedTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedTransaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(m.Transaction.Size()))
		n2, err := m.Transaction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Sign) > 0 {
		for _, msg := range m.Sign {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTransfer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func encodeVarintTransfer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Transfer) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovTransfer(uint64(m.Version))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovTransfer(uint64(m.Value))
	}
	return n
}

func (m *Contract) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovTransfer(uint64(m.Version))
	}
	if m.Vmtype != 0 {
		n += 1 + sovTransfer(uint64(m.Vmtype))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	return n
}

func (m *Transaction) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovTransfer(uint64(m.Version))
	}
	if m.Contract != nil {
		l = m.Contract.Size()
		n += 1 + l + sovTransfer(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovTransfer(uint64(m.Time))
	}
	return n
}

func (m *SignedTransaction) Size() (n int) {
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovTransfer(uint64(l))
	}
	if len(m.Sign) > 0 {
		for _, e := range m.Sign {
			l = e.Size()
			n += 1 + l + sovTransfer(uint64(l))
		}
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	return n
}

func sovTransfer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransfer(x uint64) (n int) {
	return sovTransfer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Transfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vmtype", wireType)
			}
			m.Vmtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vmtype |= (Vmtype(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args[:0], dAtA[iNdEx:postIndex]...)
			if m.Args == nil {
				m.Args = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract == nil {
				m.Contract = &Contract{}
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign, &pb.Signature{})
			if err := m.Sign[len(m.Sign)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransfer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTransfer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransfer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransfer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransfer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransfer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("transfer.proto", fileDescriptorTransfer) }

var fileDescriptorTransfer = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xbf, 0xae, 0x94, 0x40,
	0x18, 0xc5, 0xef, 0xb0, 0x2c, 0xee, 0xfd, 0xf0, 0x12, 0x1c, 0x8d, 0x21, 0x16, 0x04, 0x29, 0x0c,
	0x31, 0x0a, 0x11, 0xe3, 0x03, 0xa0, 0xd1, 0x68, 0xb1, 0x16, 0xb3, 0x04, 0x3b, 0x13, 0xfe, 0x8c,
	0x2c, 0x11, 0x18, 0x32, 0x33, 0x5b, 0x58, 0xfa, 0x0a, 0x56, 0x3e, 0x92, 0xa5, 0x8f, 0x60, 0xd6,
	0x17, 0x31, 0x0c, 0x90, 0xdd, 0x2d, 0xbc, 0x15, 0xe7, 0x7c, 0x1f, 0x9c, 0xf3, 0x9b, 0x09, 0x60,
	0x49, 0x9e, 0xf7, 0xe2, 0x0b, 0xe5, 0xe1, 0xc0, 0x99, 0x64, 0xd8, 0x50, 0x0f, 0xf1, 0xe8, 0x45,
	0xdd, 0xc8, 0xfd, 0xa1, 0x08, 0x4b, 0xd6, 0x45, 0xb4, 0x64, 0x45, 0xde, 0xb6, 0x51, 0xcd, 0x9e,
	0x2f, 0xb2, 0x64, 0x9c, 0x46, 0x43, 0x11, 0x15, 0x2d, 0x2b, 0xbf, 0x4e, 0x9f, 0xfa, 0x9f, 0x61,
	0x93, 0xce, 0x61, 0xd8, 0x81, 0x3b, 0x19, 0xe5, 0xa2, 0x61, 0xbd, 0x83, 0x3c, 0x14, 0xac, 0xc9,
	0x62, 0x31, 0x06, 0xfd, 0x1d, 0x67, 0x9d, 0xa3, 0x79, 0x28, 0xb8, 0x26, 0x4a, 0x63, 0x0b, 0xb4,
	0x94, 0x39, 0x2b, 0x35, 0xd1, 0x52, 0x86, 0x1f, 0xc0, 0x3a, 0xcb, 0xdb, 0x03, 0x75, 0x74, 0x0f,
	0x05, 0x2b, 0x32, 0x19, 0xff, 0x07, 0x82, 0xcd, 0x1b, 0xd6, 0x4b, 0x9e, 0x97, 0xf2, 0x96, 0x82,
	0x27, 0x60, 0x64, 0x9d, 0xfc, 0x36, 0x50, 0x55, 0x61, 0xc5, 0xd6, 0x84, 0x27, 0xc2, 0x69, 0x4a,
	0xe6, 0xed, 0x98, 0x90, 0x54, 0x15, 0xa7, 0x42, 0xa8, 0xe6, 0xbb, 0x64, 0xb1, 0xf8, 0x21, 0x18,
	0x5b, 0x2a, 0xf7, 0xac, 0x52, 0xfd, 0xd7, 0x64, 0x76, 0x23, 0x7a, 0xc2, 0x6b, 0xe1, 0xac, 0xd5,
	0xeb, 0x4a, 0xfb, 0x0d, 0x98, 0xea, 0xd0, 0x79, 0x29, 0xc7, 0xf2, 0xff, 0x63, 0x3d, 0x3b, 0xc1,
	0x2b, 0x30, 0x33, 0xb6, 0x17, 0xb0, 0x65, 0x4e, 0x4e, 0xc7, 0xc3, 0xa0, 0xa7, 0x4d, 0x47, 0x15,
	0xd9, 0x0d, 0x51, 0xda, 0xff, 0x8e, 0xe0, 0xde, 0xae, 0xa9, 0x7b, 0x5a, 0x9d, 0x37, 0xbe, 0xba,
	0x00, 0x50, 0xad, 0x66, 0x7c, 0x7f, 0x89, 0x3e, 0x5b, 0x91, 0x0b, 0xd0, 0xc7, 0xa0, 0x8f, 0x59,
	0x8e, 0xe6, 0xad, 0x02, 0x33, 0xbe, 0x09, 0x87, 0x22, 0x1c, 0x7d, 0x2e, 0x0f, 0x9c, 0x12, 0xb5,
	0x1a, 0x19, 0xde, 0xe7, 0x62, 0x3f, 0xdf, 0x8e, 0xd2, 0x4f, 0xdd, 0xe5, 0x72, 0x31, 0x80, 0xf1,
	0x31, 0x49, 0x3f, 0x64, 0x6f, 0xed, 0x2b, 0xbc, 0x01, 0xfd, 0x53, 0xb2, 0xdb, 0xda, 0xe8, 0xb5,
	0xfd, 0xeb, 0xe8, 0xa2, 0xdf, 0x47, 0x17, 0xfd, 0x39, 0xba, 0xe8, 0xe7, 0x5f, 0xf7, 0xaa, 0x98,
	0x7e, 0xa8, 0x97, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x6e, 0x88, 0x5e, 0x69, 0x02, 0x00,
	0x00,
}

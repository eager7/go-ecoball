// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pullmsg.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		pullmsg.proto

	It has these top-level messages:
		PullHello
		PullDigest
		PullRequest
		PullAckDataEnv
		PullReqAck
		GossipPullMsg
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// gossip pull related messages
type PullMsgType int32

const (
	PullMsgType_UNDEFINED PullMsgType = 0
	PullMsgType_BLOCK_MSG PullMsgType = 1
	PullMsgType_TRANS_MSG PullMsgType = 2
)

var PullMsgType_name = map[int32]string{
	0: "UNDEFINED",
	1: "BLOCK_MSG",
	2: "TRANS_MSG",
}
var PullMsgType_value = map[string]int32{
	"UNDEFINED": 0,
	"BLOCK_MSG": 1,
	"TRANS_MSG": 2,
}

func (x PullMsgType) String() string {
	return proto.EnumName(PullMsgType_name, int32(x))
}
func (PullMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPullmsg, []int{0} }

// gossip pull algo message
type PullHello struct {
	SenderId []byte      `protobuf:"bytes,1,opt,name=senderId,proto3" json:"senderId,omitempty"`
	MsgType  PullMsgType `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3,enum=pb.PullMsgType" json:"msg_type,omitempty"`
}

func (m *PullHello) Reset()                    { *m = PullHello{} }
func (m *PullHello) String() string            { return proto.CompactTextString(m) }
func (*PullHello) ProtoMessage()               {}
func (*PullHello) Descriptor() ([]byte, []int) { return fileDescriptorPullmsg, []int{0} }

func (m *PullHello) GetSenderId() []byte {
	if m != nil {
		return m.SenderId
	}
	return nil
}

func (m *PullHello) GetMsgType() PullMsgType {
	if m != nil {
		return m.MsgType
	}
	return PullMsgType_UNDEFINED
}

type PullDigest struct {
	SenderId []byte      `protobuf:"bytes,1,opt,name=senderId,proto3" json:"senderId,omitempty"`
	Digests  []string    `protobuf:"bytes,2,rep,name=digests" json:"digests,omitempty"`
	MsgType  PullMsgType `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3,enum=pb.PullMsgType" json:"msg_type,omitempty"`
}

func (m *PullDigest) Reset()                    { *m = PullDigest{} }
func (m *PullDigest) String() string            { return proto.CompactTextString(m) }
func (*PullDigest) ProtoMessage()               {}
func (*PullDigest) Descriptor() ([]byte, []int) { return fileDescriptorPullmsg, []int{1} }

func (m *PullDigest) GetSenderId() []byte {
	if m != nil {
		return m.SenderId
	}
	return nil
}

func (m *PullDigest) GetDigests() []string {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *PullDigest) GetMsgType() PullMsgType {
	if m != nil {
		return m.MsgType
	}
	return PullMsgType_UNDEFINED
}

type PullRequest struct {
	Asker    []byte      `protobuf:"bytes,1,opt,name=asker,proto3" json:"asker,omitempty"`
	ReqItems []string    `protobuf:"bytes,2,rep,name=ReqItems" json:"ReqItems,omitempty"`
	MsgType  PullMsgType `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3,enum=pb.PullMsgType" json:"msg_type,omitempty"`
}

func (m *PullRequest) Reset()                    { *m = PullRequest{} }
func (m *PullRequest) String() string            { return proto.CompactTextString(m) }
func (*PullRequest) ProtoMessage()               {}
func (*PullRequest) Descriptor() ([]byte, []int) { return fileDescriptorPullmsg, []int{2} }

func (m *PullRequest) GetAsker() []byte {
	if m != nil {
		return m.Asker
	}
	return nil
}

func (m *PullRequest) GetReqItems() []string {
	if m != nil {
		return m.ReqItems
	}
	return nil
}

func (m *PullRequest) GetMsgType() PullMsgType {
	if m != nil {
		return m.MsgType
	}
	return PullMsgType_UNDEFINED
}

type PullAckDataEnv struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PullAckDataEnv) Reset()                    { *m = PullAckDataEnv{} }
func (m *PullAckDataEnv) String() string            { return proto.CompactTextString(m) }
func (*PullAckDataEnv) ProtoMessage()               {}
func (*PullAckDataEnv) Descriptor() ([]byte, []int) { return fileDescriptorPullmsg, []int{3} }

func (m *PullAckDataEnv) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PullReqAck struct {
	Responser []byte            `protobuf:"bytes,1,opt,name=responser,proto3" json:"responser,omitempty"`
	Payload   []*PullAckDataEnv `protobuf:"bytes,2,rep,name=payload" json:"payload,omitempty"`
	MsgType   PullMsgType       `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3,enum=pb.PullMsgType" json:"msg_type,omitempty"`
}

func (m *PullReqAck) Reset()                    { *m = PullReqAck{} }
func (m *PullReqAck) String() string            { return proto.CompactTextString(m) }
func (*PullReqAck) ProtoMessage()               {}
func (*PullReqAck) Descriptor() ([]byte, []int) { return fileDescriptorPullmsg, []int{4} }

func (m *PullReqAck) GetResponser() []byte {
	if m != nil {
		return m.Responser
	}
	return nil
}

func (m *PullReqAck) GetPayload() []*PullAckDataEnv {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PullReqAck) GetMsgType() PullMsgType {
	if m != nil {
		return m.MsgType
	}
	return PullMsgType_UNDEFINED
}

type GossipPullMsg struct {
	// Types that are valid to be assigned to SubMsg:
	//	*GossipPullMsg_Hello
	//	*GossipPullMsg_Digest
	//	*GossipPullMsg_Request
	//	*GossipPullMsg_ReqAck
	SubMsg isGossipPullMsg_SubMsg `protobuf_oneof:"subMsg"`
}

func (m *GossipPullMsg) Reset()                    { *m = GossipPullMsg{} }
func (m *GossipPullMsg) String() string            { return proto.CompactTextString(m) }
func (*GossipPullMsg) ProtoMessage()               {}
func (*GossipPullMsg) Descriptor() ([]byte, []int) { return fileDescriptorPullmsg, []int{5} }

type isGossipPullMsg_SubMsg interface {
	isGossipPullMsg_SubMsg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GossipPullMsg_Hello struct {
	Hello *PullHello `protobuf:"bytes,1,opt,name=hello,oneof"`
}
type GossipPullMsg_Digest struct {
	Digest *PullDigest `protobuf:"bytes,2,opt,name=digest,oneof"`
}
type GossipPullMsg_Request struct {
	Request *PullRequest `protobuf:"bytes,3,opt,name=request,oneof"`
}
type GossipPullMsg_ReqAck struct {
	ReqAck *PullReqAck `protobuf:"bytes,4,opt,name=reqAck,oneof"`
}

func (*GossipPullMsg_Hello) isGossipPullMsg_SubMsg()   {}
func (*GossipPullMsg_Digest) isGossipPullMsg_SubMsg()  {}
func (*GossipPullMsg_Request) isGossipPullMsg_SubMsg() {}
func (*GossipPullMsg_ReqAck) isGossipPullMsg_SubMsg()  {}

func (m *GossipPullMsg) GetSubMsg() isGossipPullMsg_SubMsg {
	if m != nil {
		return m.SubMsg
	}
	return nil
}

func (m *GossipPullMsg) GetHello() *PullHello {
	if x, ok := m.GetSubMsg().(*GossipPullMsg_Hello); ok {
		return x.Hello
	}
	return nil
}

func (m *GossipPullMsg) GetDigest() *PullDigest {
	if x, ok := m.GetSubMsg().(*GossipPullMsg_Digest); ok {
		return x.Digest
	}
	return nil
}

func (m *GossipPullMsg) GetRequest() *PullRequest {
	if x, ok := m.GetSubMsg().(*GossipPullMsg_Request); ok {
		return x.Request
	}
	return nil
}

func (m *GossipPullMsg) GetReqAck() *PullReqAck {
	if x, ok := m.GetSubMsg().(*GossipPullMsg_ReqAck); ok {
		return x.ReqAck
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GossipPullMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GossipPullMsg_OneofMarshaler, _GossipPullMsg_OneofUnmarshaler, _GossipPullMsg_OneofSizer, []interface{}{
		(*GossipPullMsg_Hello)(nil),
		(*GossipPullMsg_Digest)(nil),
		(*GossipPullMsg_Request)(nil),
		(*GossipPullMsg_ReqAck)(nil),
	}
}

func _GossipPullMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GossipPullMsg)
	// subMsg
	switch x := m.SubMsg.(type) {
	case *GossipPullMsg_Hello:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hello); err != nil {
			return err
		}
	case *GossipPullMsg_Digest:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Digest); err != nil {
			return err
		}
	case *GossipPullMsg_Request:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case *GossipPullMsg_ReqAck:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReqAck); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GossipPullMsg.SubMsg has unexpected type %T", x)
	}
	return nil
}

func _GossipPullMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GossipPullMsg)
	switch tag {
	case 1: // subMsg.hello
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PullHello)
		err := b.DecodeMessage(msg)
		m.SubMsg = &GossipPullMsg_Hello{msg}
		return true, err
	case 2: // subMsg.digest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PullDigest)
		err := b.DecodeMessage(msg)
		m.SubMsg = &GossipPullMsg_Digest{msg}
		return true, err
	case 3: // subMsg.request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PullRequest)
		err := b.DecodeMessage(msg)
		m.SubMsg = &GossipPullMsg_Request{msg}
		return true, err
	case 4: // subMsg.reqAck
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PullReqAck)
		err := b.DecodeMessage(msg)
		m.SubMsg = &GossipPullMsg_ReqAck{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GossipPullMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GossipPullMsg)
	// subMsg
	switch x := m.SubMsg.(type) {
	case *GossipPullMsg_Hello:
		s := proto.Size(x.Hello)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipPullMsg_Digest:
		s := proto.Size(x.Digest)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipPullMsg_Request:
		s := proto.Size(x.Request)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GossipPullMsg_ReqAck:
		s := proto.Size(x.ReqAck)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*PullHello)(nil), "pb.PullHello")
	proto.RegisterType((*PullDigest)(nil), "pb.PullDigest")
	proto.RegisterType((*PullRequest)(nil), "pb.PullRequest")
	proto.RegisterType((*PullAckDataEnv)(nil), "pb.PullAckDataEnv")
	proto.RegisterType((*PullReqAck)(nil), "pb.PullReqAck")
	proto.RegisterType((*GossipPullMsg)(nil), "pb.GossipPullMsg")
	proto.RegisterEnum("pb.PullMsgType", PullMsgType_name, PullMsgType_value)
}
func (m *PullHello) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullHello) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SenderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(len(m.SenderId)))
		i += copy(dAtA[i:], m.SenderId)
	}
	if m.MsgType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(m.MsgType))
	}
	return i, nil
}

func (m *PullDigest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullDigest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SenderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(len(m.SenderId)))
		i += copy(dAtA[i:], m.SenderId)
	}
	if len(m.Digests) > 0 {
		for _, s := range m.Digests {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.MsgType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(m.MsgType))
	}
	return i, nil
}

func (m *PullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Asker) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(len(m.Asker)))
		i += copy(dAtA[i:], m.Asker)
	}
	if len(m.ReqItems) > 0 {
		for _, s := range m.ReqItems {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.MsgType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(m.MsgType))
	}
	return i, nil
}

func (m *PullAckDataEnv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullAckDataEnv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *PullReqAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullReqAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Responser) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(len(m.Responser)))
		i += copy(dAtA[i:], m.Responser)
	}
	if len(m.Payload) > 0 {
		for _, msg := range m.Payload {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPullmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MsgType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(m.MsgType))
	}
	return i, nil
}

func (m *GossipPullMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GossipPullMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubMsg != nil {
		nn1, err := m.SubMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *GossipPullMsg_Hello) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Hello != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(m.Hello.Size()))
		n2, err := m.Hello.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *GossipPullMsg_Digest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Digest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(m.Digest.Size()))
		n3, err := m.Digest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *GossipPullMsg_Request) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Request != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(m.Request.Size()))
		n4, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *GossipPullMsg_ReqAck) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReqAck != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPullmsg(dAtA, i, uint64(m.ReqAck.Size()))
		n5, err := m.ReqAck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func encodeVarintPullmsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PullHello) Size() (n int) {
	var l int
	_ = l
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovPullmsg(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovPullmsg(uint64(m.MsgType))
	}
	return n
}

func (m *PullDigest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovPullmsg(uint64(l))
	}
	if len(m.Digests) > 0 {
		for _, s := range m.Digests {
			l = len(s)
			n += 1 + l + sovPullmsg(uint64(l))
		}
	}
	if m.MsgType != 0 {
		n += 1 + sovPullmsg(uint64(m.MsgType))
	}
	return n
}

func (m *PullRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Asker)
	if l > 0 {
		n += 1 + l + sovPullmsg(uint64(l))
	}
	if len(m.ReqItems) > 0 {
		for _, s := range m.ReqItems {
			l = len(s)
			n += 1 + l + sovPullmsg(uint64(l))
		}
	}
	if m.MsgType != 0 {
		n += 1 + sovPullmsg(uint64(m.MsgType))
	}
	return n
}

func (m *PullAckDataEnv) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPullmsg(uint64(l))
	}
	return n
}

func (m *PullReqAck) Size() (n int) {
	var l int
	_ = l
	l = len(m.Responser)
	if l > 0 {
		n += 1 + l + sovPullmsg(uint64(l))
	}
	if len(m.Payload) > 0 {
		for _, e := range m.Payload {
			l = e.Size()
			n += 1 + l + sovPullmsg(uint64(l))
		}
	}
	if m.MsgType != 0 {
		n += 1 + sovPullmsg(uint64(m.MsgType))
	}
	return n
}

func (m *GossipPullMsg) Size() (n int) {
	var l int
	_ = l
	if m.SubMsg != nil {
		n += m.SubMsg.Size()
	}
	return n
}

func (m *GossipPullMsg_Hello) Size() (n int) {
	var l int
	_ = l
	if m.Hello != nil {
		l = m.Hello.Size()
		n += 1 + l + sovPullmsg(uint64(l))
	}
	return n
}
func (m *GossipPullMsg_Digest) Size() (n int) {
	var l int
	_ = l
	if m.Digest != nil {
		l = m.Digest.Size()
		n += 1 + l + sovPullmsg(uint64(l))
	}
	return n
}
func (m *GossipPullMsg_Request) Size() (n int) {
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovPullmsg(uint64(l))
	}
	return n
}
func (m *GossipPullMsg_ReqAck) Size() (n int) {
	var l int
	_ = l
	if m.ReqAck != nil {
		l = m.ReqAck.Size()
		n += 1 + l + sovPullmsg(uint64(l))
	}
	return n
}

func sovPullmsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPullmsg(x uint64) (n int) {
	return sovPullmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PullHello) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullHello: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullHello: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = append(m.SenderId[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderId == nil {
				m.SenderId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (PullMsgType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPullmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullDigest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullDigest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullDigest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = append(m.SenderId[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderId == nil {
				m.SenderId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digests", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digests = append(m.Digests, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (PullMsgType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPullmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asker = append(m.Asker[:0], dAtA[iNdEx:postIndex]...)
			if m.Asker == nil {
				m.Asker = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqItems", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqItems = append(m.ReqItems, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (PullMsgType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPullmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullAckDataEnv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullAckDataEnv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullAckDataEnv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullReqAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullReqAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullReqAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responser", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responser = append(m.Responser[:0], dAtA[iNdEx:postIndex]...)
			if m.Responser == nil {
				m.Responser = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload, &PullAckDataEnv{})
			if err := m.Payload[len(m.Payload)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (PullMsgType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPullmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GossipPullMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GossipPullMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GossipPullMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PullHello{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SubMsg = &GossipPullMsg_Hello{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PullDigest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SubMsg = &GossipPullMsg_Digest{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PullRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SubMsg = &GossipPullMsg_Request{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPullmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PullReqAck{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SubMsg = &GossipPullMsg_ReqAck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPullmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPullmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPullmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPullmsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPullmsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPullmsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPullmsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPullmsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pullmsg.proto", fileDescriptorPullmsg) }

var fileDescriptorPullmsg = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x8d, 0xb3, 0xbb, 0x4d, 0x33, 0x21, 0xa5, 0xb2, 0x38, 0x44, 0x08, 0x45, 0x55, 0x05, 0x52,
	0xb4, 0xa0, 0x1e, 0xc2, 0x8d, 0x5b, 0x4b, 0xca, 0xa6, 0x82, 0x16, 0xe4, 0x2e, 0xe7, 0x55, 0xb2,
	0xb1, 0xc2, 0x2a, 0x5f, 0x6e, 0x9c, 0x20, 0xf5, 0xce, 0x8f, 0xe0, 0xef, 0x70, 0xe3, 0xc8, 0x4f,
	0x40, 0xe5, 0x8f, 0x20, 0xdb, 0x49, 0xab, 0xbd, 0x80, 0xf6, 0xe6, 0x37, 0x33, 0x9e, 0xf7, 0xfc,
	0x9e, 0xc1, 0x66, 0x6d, 0x9e, 0x17, 0x3c, 0x9d, 0xb1, 0xba, 0x6a, 0x2a, 0xac, 0xb3, 0x78, 0xba,
	0x05, 0xf3, 0x53, 0x9b, 0xe7, 0x21, 0xcd, 0xf3, 0x0a, 0x3f, 0x85, 0x21, 0xa7, 0x65, 0x42, 0xeb,
	0x55, 0xe2, 0xa0, 0x09, 0xf2, 0x1e, 0x91, 0x23, 0xc6, 0x97, 0x30, 0x2c, 0x78, 0x7a, 0xd3, 0xec,
	0x19, 0x75, 0xf4, 0x09, 0xf2, 0x46, 0xfe, 0xe3, 0x19, 0x8b, 0x67, 0xe2, 0xf2, 0x9a, 0xa7, 0xd7,
	0x7b, 0x46, 0x89, 0x51, 0xa8, 0xc3, 0xb4, 0x04, 0x10, 0xf5, 0xe0, 0x2e, 0xa5, 0xbc, 0xf9, 0xe7,
	0x56, 0x07, 0x8c, 0x44, 0x4e, 0x71, 0x47, 0x9f, 0x9c, 0x79, 0x26, 0xe9, 0xe1, 0x3d, 0xbe, 0xb3,
	0xff, 0xf0, 0x65, 0x60, 0x89, 0x3a, 0xa1, 0xbb, 0x56, 0x10, 0x3e, 0x81, 0x8b, 0x88, 0x67, 0xb4,
	0xee, 0xd8, 0x14, 0x10, 0x32, 0x08, 0xdd, 0xad, 0x1a, 0x5a, 0xf4, 0x5c, 0x47, 0xfc, 0x20, 0xb2,
	0xe7, 0x30, 0x12, 0xf5, 0xf9, 0x6d, 0x16, 0x44, 0x4d, 0xb4, 0x2c, 0xbf, 0x62, 0x0c, 0xe7, 0x49,
	0xd4, 0x44, 0x1d, 0x9d, 0x3c, 0x4f, 0xbf, 0x21, 0xe5, 0x01, 0xa1, 0xbb, 0xf9, 0x6d, 0x86, 0x9f,
	0x81, 0x59, 0x53, 0xce, 0xaa, 0x92, 0x1f, 0x65, 0x9d, 0x0a, 0xf8, 0x15, 0x18, 0x2c, 0xda, 0xe7,
	0x55, 0x94, 0x48, 0x65, 0x96, 0x8f, 0x7b, 0xf6, 0x13, 0x0b, 0xe9, 0x47, 0x1e, 0x24, 0xf6, 0x07,
	0x02, 0xfb, 0xaa, 0xe2, 0xfc, 0x8e, 0x75, 0x6d, 0xfc, 0x02, 0x2e, 0xbe, 0x88, 0xb0, 0xa5, 0x0a,
	0xcb, 0xb7, 0xfb, 0xab, 0xf2, 0x07, 0x84, 0x1a, 0x51, 0x5d, 0xec, 0xc1, 0x40, 0x25, 0x21, 0xc3,
	0xb6, 0xfc, 0x51, 0x3f, 0xa7, 0x42, 0x0d, 0x35, 0xd2, 0xf5, 0xf1, 0x4b, 0x30, 0x6a, 0x65, 0xbc,
	0x54, 0x63, 0x9d, 0xd4, 0x74, 0x79, 0x84, 0x1a, 0xe9, 0x27, 0xc4, 0xda, 0x5a, 0x3a, 0xe2, 0x9c,
	0xdf, 0x5f, 0xab, 0x7c, 0x12, 0x6b, 0x55, 0x7f, 0x31, 0x84, 0x01, 0x6f, 0xe3, 0x35, 0x4f, 0x2f,
	0xdf, 0xa8, 0x74, 0xbb, 0xb7, 0x61, 0x1b, 0xcc, 0xcf, 0x9b, 0x60, 0xf9, 0x6e, 0xb5, 0x59, 0x06,
	0x63, 0x4d, 0xc0, 0xc5, 0x87, 0x8f, 0x6f, 0xdf, 0xdf, 0xac, 0xb7, 0x57, 0x63, 0x24, 0xe0, 0x35,
	0x99, 0x6f, 0xb6, 0x12, 0xea, 0x8b, 0xf1, 0xcf, 0x83, 0x8b, 0x7e, 0x1d, 0x5c, 0xf4, 0xfb, 0xe0,
	0xa2, 0xef, 0x7f, 0x5c, 0x2d, 0x1e, 0xc8, 0xbf, 0xff, 0xfa, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x48, 0xa4, 0x95, 0xc6, 0x0c, 0x03, 0x00, 0x00,
}

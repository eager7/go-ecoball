// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		message.proto

	It has these top-level messages:
		Message
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ecoball related message
type MsgType int32

const (
	MsgType_APP_MSG_TRN              MsgType = 0
	MsgType_APP_MSG_BLK              MsgType = 1
	MsgType_APP_MSG_SIGNPRE          MsgType = 2
	MsgType_APP_MSG_BLKF             MsgType = 3
	MsgType_APP_MSG_SIGNBLKF         MsgType = 4
	MsgType_APP_MSG_BLKS             MsgType = 5
	MsgType_APP_MSG_REQSYN           MsgType = 6
	MsgType_APP_MSG_REQSYNSOLO       MsgType = 7
	MsgType_APP_MSG_BLKSYN           MsgType = 8
	MsgType_APP_MSG_TIMEOUT          MsgType = 9
	MsgType_APP_MSG_SHARDING_PACKET  MsgType = 10
	MsgType_APP_MSG_CONSENSUS_PACKET MsgType = 11
	MsgType_APP_MSG_P2PRTSYN         MsgType = 12
	MsgType_APP_MSG_P2PRTSYNACK      MsgType = 13
	MsgType_APP_MSG_GOSSIP           MsgType = 14
	MsgType_APP_MSG_GOSSIP_PULL      MsgType = 15
	MsgType_APP_MSG_DKGSIJ           MsgType = 16
	MsgType_APP_MSG_DKGNLQUAL        MsgType = 17
	MsgType_APP_MSG_DKGLQUAL         MsgType = 18
	MsgType_APP_MSG_SYNC_REQUEST     MsgType = 19
	MsgType_APP_MSG_SYNC_RESPONSE    MsgType = 20
	MsgType_APP_MSG_STRING           MsgType = 21
	MsgType_APP_MSG_UNDEFINED        MsgType = 22
)

var MsgType_name = map[int32]string{
	0:  "APP_MSG_TRN",
	1:  "APP_MSG_BLK",
	2:  "APP_MSG_SIGNPRE",
	3:  "APP_MSG_BLKF",
	4:  "APP_MSG_SIGNBLKF",
	5:  "APP_MSG_BLKS",
	6:  "APP_MSG_REQSYN",
	7:  "APP_MSG_REQSYNSOLO",
	8:  "APP_MSG_BLKSYN",
	9:  "APP_MSG_TIMEOUT",
	10: "APP_MSG_SHARDING_PACKET",
	11: "APP_MSG_CONSENSUS_PACKET",
	12: "APP_MSG_P2PRTSYN",
	13: "APP_MSG_P2PRTSYNACK",
	14: "APP_MSG_GOSSIP",
	15: "APP_MSG_GOSSIP_PULL",
	16: "APP_MSG_DKGSIJ",
	17: "APP_MSG_DKGNLQUAL",
	18: "APP_MSG_DKGLQUAL",
	19: "APP_MSG_SYNC_REQUEST",
	20: "APP_MSG_SYNC_RESPONSE",
	21: "APP_MSG_STRING",
	22: "APP_MSG_UNDEFINED",
}
var MsgType_value = map[string]int32{
	"APP_MSG_TRN":              0,
	"APP_MSG_BLK":              1,
	"APP_MSG_SIGNPRE":          2,
	"APP_MSG_BLKF":             3,
	"APP_MSG_SIGNBLKF":         4,
	"APP_MSG_BLKS":             5,
	"APP_MSG_REQSYN":           6,
	"APP_MSG_REQSYNSOLO":       7,
	"APP_MSG_BLKSYN":           8,
	"APP_MSG_TIMEOUT":          9,
	"APP_MSG_SHARDING_PACKET":  10,
	"APP_MSG_CONSENSUS_PACKET": 11,
	"APP_MSG_P2PRTSYN":         12,
	"APP_MSG_P2PRTSYNACK":      13,
	"APP_MSG_GOSSIP":           14,
	"APP_MSG_GOSSIP_PULL":      15,
	"APP_MSG_DKGSIJ":           16,
	"APP_MSG_DKGNLQUAL":        17,
	"APP_MSG_DKGLQUAL":         18,
	"APP_MSG_SYNC_REQUEST":     19,
	"APP_MSG_SYNC_RESPONSE":    20,
	"APP_MSG_STRING":           21,
	"APP_MSG_UNDEFINED":        22,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

type Message struct {
	ChainId uint32  `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Type    MsgType `protobuf:"varint,2,opt,name=type,proto3,enum=pb.MsgType" json:"type,omitempty"`
	Nonce   uint64  `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Data    []byte  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *Message) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *Message) GetType() MsgType {
	if m != nil {
		return m.Type
	}
	return MsgType_APP_MSG_TRN
}

func (m *Message) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "pb.Message")
	proto.RegisterEnum("pb.MsgType", MsgType_name, MsgType_value)
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ChainId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Nonce))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovMessage(uint64(m.ChainId))
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.Nonce != 0 {
		n += 1 + sovMessage(uint64(m.Nonce))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MsgType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0x3b, 0xa9, 0xdb, 0xc0, 0xcb, 0xbf, 0xd7, 0x97, 0xa4, 0x35, 0x02, 0x85, 0x88, 0x55,
	0xc4, 0x22, 0x8b, 0x72, 0x02, 0x37, 0x9e, 0x9a, 0xc1, 0xce, 0x78, 0x3a, 0x33, 0x5e, 0x64, 0x15,
	0x25, 0xad, 0x55, 0x58, 0x90, 0x58, 0x24, 0x9b, 0x9e, 0x80, 0x2b, 0x70, 0x24, 0x96, 0x1c, 0x01,
	0x85, 0x8b, 0xa0, 0xc4, 0xb8, 0x1a, 0xb2, 0xf3, 0xfb, 0x7d, 0xdf, 0xd3, 0xf7, 0x3d, 0x6b, 0xa0,
	0xf5, 0x35, 0xdf, 0x6c, 0x16, 0x8f, 0xf9, 0xb8, 0xf8, 0xb6, 0xde, 0xae, 0xa9, 0x56, 0x2c, 0xdf,
	0xad, 0xa0, 0x3e, 0x2d, 0x21, 0xf9, 0x50, 0xbf, 0xff, 0xbc, 0xf8, 0xb2, 0x12, 0x0f, 0x3e, 0x1b,
	0xb2, 0x51, 0x4b, 0x57, 0x23, 0xbd, 0x05, 0x6f, 0xfb, 0x54, 0xe4, 0x7e, 0x6d, 0xc8, 0x46, 0xed,
	0xeb, 0xc6, 0xb8, 0x58, 0x8e, 0xa7, 0x9b, 0x47, 0xfb, 0x54, 0xe4, 0xfa, 0x20, 0x50, 0x0f, 0xce,
	0x56, 0xeb, 0xd5, 0x7d, 0xee, 0x9f, 0x0e, 0xd9, 0xc8, 0xd3, 0xe5, 0x40, 0x04, 0xde, 0xc3, 0x62,
	0xbb, 0xf0, 0xbd, 0x21, 0x1b, 0x35, 0xf5, 0xe1, 0xfb, 0xfd, 0x77, 0x0f, 0xea, 0xff, 0x76, 0xa9,
	0x03, 0x8d, 0x40, 0xa9, 0xf9, 0xd4, 0x44, 0x73, 0xab, 0x25, 0x9e, 0xb8, 0xe0, 0x26, 0x89, 0x91,
	0x51, 0x17, 0x3a, 0x15, 0x30, 0x22, 0x92, 0x4a, 0x73, 0xac, 0x11, 0x42, 0xd3, 0x71, 0xdd, 0xe2,
	0x29, 0xf5, 0x00, 0x5d, 0xdb, 0x81, 0x7a, 0x47, 0x3e, 0x83, 0x67, 0x44, 0xd0, 0xae, 0x88, 0xe6,
	0x77, 0x66, 0x26, 0xf1, 0x9c, 0x2e, 0x81, 0xfe, 0x67, 0x26, 0x4d, 0x52, 0xac, 0xbb, 0xde, 0xfd,
	0xf6, 0x4c, 0xe2, 0x0b, 0xb7, 0x8e, 0x15, 0x53, 0x9e, 0x66, 0x16, 0x5f, 0xd2, 0x6b, 0xb8, 0x7a,
	0x0e, 0xff, 0x18, 0xe8, 0x50, 0xc8, 0x68, 0xae, 0x82, 0x49, 0xcc, 0x2d, 0x02, 0xbd, 0x01, 0xbf,
	0x12, 0x27, 0xa9, 0x34, 0x5c, 0x9a, 0xcc, 0x54, 0x6a, 0xc3, 0xed, 0xad, 0xae, 0x95, 0xb6, 0xfb,
	0x94, 0x26, 0x5d, 0x41, 0xf7, 0x98, 0x06, 0x93, 0x18, 0x5b, 0x6e, 0xa5, 0x28, 0x35, 0x46, 0x28,
	0x6c, 0xbb, 0xe6, 0x92, 0xcd, 0x55, 0x96, 0x24, 0xd8, 0x71, 0xcd, 0x61, 0x1c, 0x19, 0xf1, 0x09,
	0x91, 0xfa, 0x70, 0xe1, 0x30, 0x99, 0xdc, 0x65, 0x41, 0x82, 0x17, 0x6e, 0x8d, 0x30, 0x8e, 0x4a,
	0x4a, 0xe4, 0x43, 0xef, 0xf9, 0xae, 0x99, 0x9c, 0xec, 0xff, 0x4e, 0xc6, 0x8d, 0xc5, 0x2e, 0xbd,
	0x82, 0xfe, 0x91, 0x62, 0xd4, 0xfe, 0x38, 0xec, 0xb9, 0xa9, 0xc6, 0x6a, 0x21, 0x23, 0xec, 0xbb,
	0xa9, 0x99, 0x0c, 0xf9, 0xad, 0x90, 0x3c, 0xc4, 0xcb, 0x1b, 0xfc, 0xb9, 0x1b, 0xb0, 0x5f, 0xbb,
	0x01, 0xfb, 0xbd, 0x1b, 0xb0, 0x1f, 0x7f, 0x06, 0x27, 0xcb, 0xf3, 0xc3, 0xb3, 0xfc, 0xf0, 0x37,
	0x00, 0x00, 0xff, 0xff, 0xe3, 0xe4, 0xc6, 0x44, 0xa7, 0x02, 0x00, 0x00,
}

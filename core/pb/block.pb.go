// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: block.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		block.proto

	It has these top-level messages:
		Header
		HeaderTx
		BlockTx
		ConsensusData
		AbaBftData
		TxPayload
		DeployInfo
		ParamData
		InvokeInfo
		TransactionReceipt
		BlockReceipt
		Transaction
		ConsensusState
		Miner
		Signature
		AccountWeight
		KeyWeight
		Permission
		Ram
		Res
		Delegate
		Producer
		Votes
		Account
		TokenInfo
		Token
		Contract
		BlockCt
		PullBlocksRequest
		PullBlocksResponse
		PushBlocks
		SignaturePreblock
		RequestSyn
		ToutMsg
		BlockSyn
		StoreRepoStatMsg
		ShardInfo
		Cid
		MinorBlockHeader
		AccountMinor
		MinorBlock
		NodeInfo
		CMBlockHeader
		NodeAddr
		Shard
		CMBlock
		FinalBlockHeader
		FinalBlock
		COSign
		P2PRtSyncMsg
		PeerInfo
		P2PRtSyncAckMsg
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// * Header info for compute hash
type Header struct {
	Type          uint32         `protobuf:"varint,12,opt,name=Type,proto3" json:"Type,omitempty"`
	Payload       []byte         `protobuf:"bytes,13,opt,name=Payload,proto3" json:"Payload,omitempty"`
	ChainID       []byte         `protobuf:"bytes,11,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Version       uint32         `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Timestamp     int64          `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Height        uint64         `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	ConsensusData *ConsensusData `protobuf:"bytes,8,opt,name=ConsensusData" json:"ConsensusData,omitempty"`
	PrevHash      []byte         `protobuf:"bytes,4,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	MerkleHash    []byte         `protobuf:"bytes,5,opt,name=merkle_hash,json=merkleHash,proto3" json:"merkle_hash,omitempty"`
	StateHash     []byte         `protobuf:"bytes,6,opt,name=state_hash,json=stateHash,proto3" json:"state_hash,omitempty"`
	Bloom         []byte         `protobuf:"bytes,10,opt,name=Bloom,proto3" json:"Bloom,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{0} }

func (m *Header) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Header) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Header) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *Header) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Header) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Header) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Header) GetConsensusData() *ConsensusData {
	if m != nil {
		return m.ConsensusData
	}
	return nil
}

func (m *Header) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *Header) GetMerkleHash() []byte {
	if m != nil {
		return m.MerkleHash
	}
	return nil
}

func (m *Header) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Header) GetBloom() []byte {
	if m != nil {
		return m.Bloom
	}
	return nil
}

// *
// * Header info for sync with nodes
type HeaderTx struct {
	Header    *Header       `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Receipt   *BlockReceipt `protobuf:"bytes,2,opt,name=Receipt" json:"Receipt,omitempty"`
	Sign      []*Signature  `protobuf:"bytes,6,rep,name=sign" json:"sign,omitempty"`
	BlockHash []byte        `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *HeaderTx) Reset()                    { *m = HeaderTx{} }
func (m *HeaderTx) String() string            { return proto.CompactTextString(m) }
func (*HeaderTx) ProtoMessage()               {}
func (*HeaderTx) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{1} }

func (m *HeaderTx) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HeaderTx) GetReceipt() *BlockReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *HeaderTx) GetSign() []*Signature {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *HeaderTx) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

// *
// * Block info for sync with nodes
type BlockTx struct {
	Header       *HeaderTx      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,4,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *BlockTx) Reset()                    { *m = BlockTx{} }
func (m *BlockTx) String() string            { return proto.CompactTextString(m) }
func (*BlockTx) ProtoMessage()               {}
func (*BlockTx) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{2} }

func (m *BlockTx) GetHeader() *HeaderTx {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockTx) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// *
// * Consensus Data
type ConsensusData struct {
	Type uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ConsensusData) Reset()                    { *m = ConsensusData{} }
func (m *ConsensusData) String() string            { return proto.CompactTextString(m) }
func (*ConsensusData) ProtoMessage()               {}
func (*ConsensusData) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{3} }

func (m *ConsensusData) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ConsensusData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// *
// * Aba Consensus Data
type AbaBftData struct {
	NumberRound uint32       `protobuf:"varint,1,opt,name=NumberRound,proto3" json:"NumberRound,omitempty"`
	Sign        []*Signature `protobuf:"bytes,2,rep,name=sign" json:"sign,omitempty"`
}

func (m *AbaBftData) Reset()                    { *m = AbaBftData{} }
func (m *AbaBftData) String() string            { return proto.CompactTextString(m) }
func (*AbaBftData) ProtoMessage()               {}
func (*AbaBftData) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{4} }

func (m *AbaBftData) GetNumberRound() uint32 {
	if m != nil {
		return m.NumberRound
	}
	return 0
}

func (m *AbaBftData) GetSign() []*Signature {
	if m != nil {
		return m.Sign
	}
	return nil
}

// *
// * Transaction info for compute hash
type TxPayload struct {
	Version    uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ChainID    []byte `protobuf:"bytes,9,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Type       uint32 `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
	From       uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	Permission []byte `protobuf:"bytes,8,opt,name=Permission,proto3" json:"Permission,omitempty"`
	Addr       uint64 `protobuf:"varint,3,opt,name=addr,proto3" json:"addr,omitempty"`
	Payload    []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Nonce      uint64 `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Timestamp  int64  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *TxPayload) Reset()                    { *m = TxPayload{} }
func (m *TxPayload) String() string            { return proto.CompactTextString(m) }
func (*TxPayload) ProtoMessage()               {}
func (*TxPayload) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{5} }

func (m *TxPayload) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TxPayload) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *TxPayload) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TxPayload) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *TxPayload) GetPermission() []byte {
	if m != nil {
		return m.Permission
	}
	return nil
}

func (m *TxPayload) GetAddr() uint64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *TxPayload) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TxPayload) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TxPayload) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type DeployInfo struct {
	TypeVm   uint32 `protobuf:"varint,5,opt,name=TypeVm,proto3" json:"TypeVm,omitempty"`
	Describe []byte `protobuf:"bytes,4,opt,name=Describe,proto3" json:"Describe,omitempty"`
	Code     []byte `protobuf:"bytes,6,opt,name=Code,proto3" json:"Code,omitempty"`
	Abi      []byte `protobuf:"bytes,7,opt,name=Abi,proto3" json:"Abi,omitempty"`
}

func (m *DeployInfo) Reset()                    { *m = DeployInfo{} }
func (m *DeployInfo) String() string            { return proto.CompactTextString(m) }
func (*DeployInfo) ProtoMessage()               {}
func (*DeployInfo) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{6} }

func (m *DeployInfo) GetTypeVm() uint32 {
	if m != nil {
		return m.TypeVm
	}
	return 0
}

func (m *DeployInfo) GetDescribe() []byte {
	if m != nil {
		return m.Describe
	}
	return nil
}

func (m *DeployInfo) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *DeployInfo) GetAbi() []byte {
	if m != nil {
		return m.Abi
	}
	return nil
}

type ParamData struct {
	Param []byte `protobuf:"bytes,1,opt,name=Param,proto3" json:"Param,omitempty"`
}

func (m *ParamData) Reset()                    { *m = ParamData{} }
func (m *ParamData) String() string            { return proto.CompactTextString(m) }
func (*ParamData) ProtoMessage()               {}
func (*ParamData) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{7} }

func (m *ParamData) GetParam() []byte {
	if m != nil {
		return m.Param
	}
	return nil
}

type InvokeInfo struct {
	Method []byte       `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	Param  []*ParamData `protobuf:"bytes,2,rep,name=Param" json:"Param,omitempty"`
}

func (m *InvokeInfo) Reset()                    { *m = InvokeInfo{} }
func (m *InvokeInfo) String() string            { return proto.CompactTextString(m) }
func (*InvokeInfo) ProtoMessage()               {}
func (*InvokeInfo) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{8} }

func (m *InvokeInfo) GetMethod() []byte {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *InvokeInfo) GetParam() []*ParamData {
	if m != nil {
		return m.Param
	}
	return nil
}

type TransactionReceipt struct {
	Hash      []byte   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Cpu       float64  `protobuf:"fixed64,2,opt,name=Cpu,proto3" json:"Cpu,omitempty"`
	Net       float64  `protobuf:"fixed64,3,opt,name=Net,proto3" json:"Net,omitempty"`
	Result    []byte   `protobuf:"bytes,4,opt,name=Result,proto3" json:"Result,omitempty"`
	From      uint64   `protobuf:"varint,5,opt,name=From,proto3" json:"From,omitempty"`
	To        uint64   `protobuf:"varint,6,opt,name=To,proto3" json:"To,omitempty"`
	TokenName string   `protobuf:"bytes,7,opt,name=TokenName,proto3" json:"TokenName,omitempty"`
	Amount    []byte   `protobuf:"bytes,10,opt,name=Amount,proto3" json:"Amount,omitempty"`
	NewToken  []byte   `protobuf:"bytes,9,opt,name=NewToken,proto3" json:"NewToken,omitempty"`
	Accounts  [][]byte `protobuf:"bytes,8,rep,name=Accounts" json:"Accounts,omitempty"`
	Producer  uint64   `protobuf:"varint,11,opt,name=Producer,proto3" json:"Producer,omitempty"`
}

func (m *TransactionReceipt) Reset()                    { *m = TransactionReceipt{} }
func (m *TransactionReceipt) String() string            { return proto.CompactTextString(m) }
func (*TransactionReceipt) ProtoMessage()               {}
func (*TransactionReceipt) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{9} }

func (m *TransactionReceipt) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *TransactionReceipt) GetCpu() float64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *TransactionReceipt) GetNet() float64 {
	if m != nil {
		return m.Net
	}
	return 0
}

func (m *TransactionReceipt) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *TransactionReceipt) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *TransactionReceipt) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *TransactionReceipt) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *TransactionReceipt) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TransactionReceipt) GetNewToken() []byte {
	if m != nil {
		return m.NewToken
	}
	return nil
}

func (m *TransactionReceipt) GetAccounts() [][]byte {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *TransactionReceipt) GetProducer() uint64 {
	if m != nil {
		return m.Producer
	}
	return 0
}

type BlockReceipt struct {
	BlockCpu float64 `protobuf:"fixed64,1,opt,name=BlockCpu,proto3" json:"BlockCpu,omitempty"`
	BlockNet float64 `protobuf:"fixed64,2,opt,name=BlockNet,proto3" json:"BlockNet,omitempty"`
}

func (m *BlockReceipt) Reset()                    { *m = BlockReceipt{} }
func (m *BlockReceipt) String() string            { return proto.CompactTextString(m) }
func (*BlockReceipt) ProtoMessage()               {}
func (*BlockReceipt) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{10} }

func (m *BlockReceipt) GetBlockCpu() float64 {
	if m != nil {
		return m.BlockCpu
	}
	return 0
}

func (m *BlockReceipt) GetBlockNet() float64 {
	if m != nil {
		return m.BlockNet
	}
	return 0
}

// *
// * Transaction Info for Sync with nodes
type Transaction struct {
	Payload *TxPayload   `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Sign    []*Signature `protobuf:"bytes,2,rep,name=sign" json:"sign,omitempty"`
	Hash    []byte       `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Receipt []byte       `protobuf:"bytes,4,opt,name=Receipt,proto3" json:"Receipt,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{11} }

func (m *Transaction) GetPayload() *TxPayload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Transaction) GetSign() []*Signature {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Transaction) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Transaction) GetReceipt() []byte {
	if m != nil {
		return m.Receipt
	}
	return nil
}

// *
// *
type ConsensusState struct {
	Hash        []byte   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Bookkeepers []*Miner `protobuf:"bytes,2,rep,name=bookkeepers" json:"bookkeepers,omitempty"`
	Timestamp   int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ConsensusState) Reset()                    { *m = ConsensusState{} }
func (m *ConsensusState) String() string            { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()               {}
func (*ConsensusState) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{12} }

func (m *ConsensusState) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ConsensusState) GetBookkeepers() []*Miner {
	if m != nil {
		return m.Bookkeepers
	}
	return nil
}

func (m *ConsensusState) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Miner struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Miner) Reset()                    { *m = Miner{} }
func (m *Miner) String() string            { return proto.CompactTextString(m) }
func (*Miner) ProtoMessage()               {}
func (*Miner) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{13} }

func (m *Miner) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// *
// * Signature Info
type Signature struct {
	ChainID []byte `protobuf:"bytes,3,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	PubKey  []byte `protobuf:"bytes,1,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	SigData []byte `protobuf:"bytes,2,opt,name=SigData,proto3" json:"SigData,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{14} }

func (m *Signature) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *Signature) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Signature) GetSigData() []byte {
	if m != nil {
		return m.SigData
	}
	return nil
}

// *
// * Account Permission
type AccountWeight struct {
	Actor      uint64 `protobuf:"varint,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Weight     uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Permission []byte `protobuf:"bytes,3,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (m *AccountWeight) Reset()                    { *m = AccountWeight{} }
func (m *AccountWeight) String() string            { return proto.CompactTextString(m) }
func (*AccountWeight) ProtoMessage()               {}
func (*AccountWeight) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{15} }

func (m *AccountWeight) GetActor() uint64 {
	if m != nil {
		return m.Actor
	}
	return 0
}

func (m *AccountWeight) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *AccountWeight) GetPermission() []byte {
	if m != nil {
		return m.Permission
	}
	return nil
}

type KeyWeight struct {
	Actor  []byte `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *KeyWeight) Reset()                    { *m = KeyWeight{} }
func (m *KeyWeight) String() string            { return proto.CompactTextString(m) }
func (*KeyWeight) ProtoMessage()               {}
func (*KeyWeight) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{16} }

func (m *KeyWeight) GetActor() []byte {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *KeyWeight) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type Permission struct {
	PermName  []byte           `protobuf:"bytes,4,opt,name=PermName,proto3" json:"PermName,omitempty"`
	Parent    []byte           `protobuf:"bytes,5,opt,name=Parent,proto3" json:"Parent,omitempty"`
	Threshold uint32           `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Keys      []*KeyWeight     `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
	Accounts  []*AccountWeight `protobuf:"bytes,3,rep,name=accounts" json:"accounts,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{17} }

func (m *Permission) GetPermName() []byte {
	if m != nil {
		return m.PermName
	}
	return nil
}

func (m *Permission) GetParent() []byte {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Permission) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *Permission) GetKeys() []*KeyWeight {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *Permission) GetAccounts() []*AccountWeight {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type Ram struct {
	Quota float64 `protobuf:"fixed64,1,opt,name=Quota,proto3" json:"Quota,omitempty"`
	Used  float64 `protobuf:"fixed64,2,opt,name=Used,proto3" json:"Used,omitempty"`
}

func (m *Ram) Reset()                    { *m = Ram{} }
func (m *Ram) String() string            { return proto.CompactTextString(m) }
func (*Ram) ProtoMessage()               {}
func (*Ram) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{18} }

func (m *Ram) GetQuota() float64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *Ram) GetUsed() float64 {
	if m != nil {
		return m.Used
	}
	return 0
}

type Res struct {
	Staked    uint64  `protobuf:"varint,1,opt,name=Staked,proto3" json:"Staked,omitempty"`
	Delegated uint64  `protobuf:"varint,5,opt,name=Delegated,proto3" json:"Delegated,omitempty"`
	Used      float64 `protobuf:"fixed64,2,opt,name=Used,proto3" json:"Used,omitempty"`
	Available float64 `protobuf:"fixed64,3,opt,name=Available,proto3" json:"Available,omitempty"`
	Limit     float64 `protobuf:"fixed64,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (m *Res) Reset()                    { *m = Res{} }
func (m *Res) String() string            { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()               {}
func (*Res) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{19} }

func (m *Res) GetStaked() uint64 {
	if m != nil {
		return m.Staked
	}
	return 0
}

func (m *Res) GetDelegated() uint64 {
	if m != nil {
		return m.Delegated
	}
	return 0
}

func (m *Res) GetUsed() float64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *Res) GetAvailable() float64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *Res) GetLimit() float64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Delegate struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Cpu   uint64 `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Net   uint64 `protobuf:"varint,3,opt,name=net,proto3" json:"net,omitempty"`
}

func (m *Delegate) Reset()                    { *m = Delegate{} }
func (m *Delegate) String() string            { return proto.CompactTextString(m) }
func (*Delegate) ProtoMessage()               {}
func (*Delegate) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{20} }

func (m *Delegate) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Delegate) GetCpu() uint64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *Delegate) GetNet() uint64 {
	if m != nil {
		return m.Net
	}
	return 0
}

type Producer struct {
	AccountName uint64 `protobuf:"varint,1,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	Amount      uint64 `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *Producer) Reset()                    { *m = Producer{} }
func (m *Producer) String() string            { return proto.CompactTextString(m) }
func (*Producer) ProtoMessage()               {}
func (*Producer) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{21} }

func (m *Producer) GetAccountName() uint64 {
	if m != nil {
		return m.AccountName
	}
	return 0
}

func (m *Producer) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Votes struct {
	Staked    uint64      `protobuf:"varint,1,opt,name=staked,proto3" json:"staked,omitempty"`
	Producers []*Producer `protobuf:"bytes,2,rep,name=Producers" json:"Producers,omitempty"`
}

func (m *Votes) Reset()                    { *m = Votes{} }
func (m *Votes) String() string            { return proto.CompactTextString(m) }
func (*Votes) ProtoMessage()               {}
func (*Votes) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{22} }

func (m *Votes) GetStaked() uint64 {
	if m != nil {
		return m.Staked
	}
	return 0
}

func (m *Votes) GetProducers() []*Producer {
	if m != nil {
		return m.Producers
	}
	return nil
}

// *
// * Account Object
type Account struct {
	Index       uint64        `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	TimeStamp   int64         `protobuf:"varint,5,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
	Tokens      []*Token      `protobuf:"bytes,3,rep,name=Tokens" json:"Tokens,omitempty"`
	Permissions []*Permission `protobuf:"bytes,1,rep,name=Permissions" json:"Permissions,omitempty"`
	Contract    *DeployInfo   `protobuf:"bytes,2,opt,name=Contract" json:"Contract,omitempty"`
	Delegates   []*Delegate   `protobuf:"bytes,10,rep,name=Delegates" json:"Delegates,omitempty"`
	Ram         *Ram          `protobuf:"bytes,7,opt,name=Ram" json:"Ram,omitempty"`
	Cpu         *Res          `protobuf:"bytes,8,opt,name=Cpu" json:"Cpu,omitempty"`
	Net         *Res          `protobuf:"bytes,9,opt,name=Net" json:"Net,omitempty"`
	Votes       *Votes        `protobuf:"bytes,11,opt,name=Votes" json:"Votes,omitempty"`
	Hash        []byte        `protobuf:"bytes,6,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{23} }

func (m *Account) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Account) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *Account) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *Account) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Account) GetContract() *DeployInfo {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *Account) GetDelegates() []*Delegate {
	if m != nil {
		return m.Delegates
	}
	return nil
}

func (m *Account) GetRam() *Ram {
	if m != nil {
		return m.Ram
	}
	return nil
}

func (m *Account) GetCpu() *Res {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Account) GetNet() *Res {
	if m != nil {
		return m.Net
	}
	return nil
}

func (m *Account) GetVotes() *Votes {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *Account) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// *
// * Tokens Info
type TokenInfo struct {
	Symbol    string `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	MaxSupply int32  `protobuf:"varint,2,opt,name=MaxSupply,proto3" json:"MaxSupply,omitempty"`
	Supply    int32  `protobuf:"varint,3,opt,name=Supply,proto3" json:"Supply,omitempty"`
	Issuer    uint64 `protobuf:"varint,4,opt,name=Issuer,proto3" json:"Issuer,omitempty"`
}

func (m *TokenInfo) Reset()                    { *m = TokenInfo{} }
func (m *TokenInfo) String() string            { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()               {}
func (*TokenInfo) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{24} }

func (m *TokenInfo) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TokenInfo) GetMaxSupply() int32 {
	if m != nil {
		return m.MaxSupply
	}
	return 0
}

func (m *TokenInfo) GetSupply() int32 {
	if m != nil {
		return m.Supply
	}
	return 0
}

func (m *TokenInfo) GetIssuer() uint64 {
	if m != nil {
		return m.Issuer
	}
	return 0
}

// *
// * Account Token Info
type Token struct {
	Name    string `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Balance []byte `protobuf:"bytes,2,opt,name=Balance,proto3" json:"Balance,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{25} }

func (m *Token) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Token) GetBalance() []byte {
	if m != nil {
		return m.Balance
	}
	return nil
}

// *
// * Smart Contract
type Contract struct {
	ActionType uint32 `protobuf:"varint,1,opt,name=ActionType,proto3" json:"ActionType,omitempty"`
	Config     []byte `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (m *Contract) Reset()                    { *m = Contract{} }
func (m *Contract) String() string            { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()               {}
func (*Contract) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{26} }

func (m *Contract) GetActionType() uint32 {
	if m != nil {
		return m.ActionType
	}
	return 0
}

func (m *Contract) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type BlockCt struct {
	Header    *HeaderTx   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Contracts []*Contract `protobuf:"bytes,4,rep,name=contracts" json:"contracts,omitempty"`
}

func (m *BlockCt) Reset()                    { *m = BlockCt{} }
func (m *BlockCt) String() string            { return proto.CompactTextString(m) }
func (*BlockCt) ProtoMessage()               {}
func (*BlockCt) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{27} }

func (m *BlockCt) GetHeader() *HeaderTx {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockCt) GetContracts() []*Contract {
	if m != nil {
		return m.Contracts
	}
	return nil
}

// *
// * Gossip Pull Blocks request
type PullBlocksRequest struct {
	PeerHash []byte `protobuf:"bytes,1,opt,name=peer_hash,json=peerHash,proto3" json:"peer_hash,omitempty"`
	ChainId  uint32 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height   uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *PullBlocksRequest) Reset()                    { *m = PullBlocksRequest{} }
func (m *PullBlocksRequest) String() string            { return proto.CompactTextString(m) }
func (*PullBlocksRequest) ProtoMessage()               {}
func (*PullBlocksRequest) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{28} }

func (m *PullBlocksRequest) GetPeerHash() []byte {
	if m != nil {
		return m.PeerHash
	}
	return nil
}

func (m *PullBlocksRequest) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *PullBlocksRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// *
// * Gossip Pull Blocks response
type PullBlocksResponse struct {
	PeerHash   []byte     `protobuf:"bytes,1,opt,name=peer_hash,json=peerHash,proto3" json:"peer_hash,omitempty"`
	ChainId    uint32     `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height     uint64     `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	BlockCount uint64     `protobuf:"varint,4,opt,name=block_count,json=blockCount,proto3" json:"block_count,omitempty"`
	Data       []*BlockTx `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
}

func (m *PullBlocksResponse) Reset()                    { *m = PullBlocksResponse{} }
func (m *PullBlocksResponse) String() string            { return proto.CompactTextString(m) }
func (*PullBlocksResponse) ProtoMessage()               {}
func (*PullBlocksResponse) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{29} }

func (m *PullBlocksResponse) GetPeerHash() []byte {
	if m != nil {
		return m.PeerHash
	}
	return nil
}

func (m *PullBlocksResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *PullBlocksResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PullBlocksResponse) GetBlockCount() uint64 {
	if m != nil {
		return m.BlockCount
	}
	return 0
}

func (m *PullBlocksResponse) GetData() []*BlockTx {
	if m != nil {
		return m.Data
	}
	return nil
}

// *
// * Gossip  Push Blocks
type PushBlocks struct {
	ChainId    uint32     `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	BlockCount uint64     `protobuf:"varint,2,opt,name=block_count,json=blockCount,proto3" json:"block_count,omitempty"`
	Data       []*BlockTx `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *PushBlocks) Reset()                    { *m = PushBlocks{} }
func (m *PushBlocks) String() string            { return proto.CompactTextString(m) }
func (*PushBlocks) ProtoMessage()               {}
func (*PushBlocks) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{30} }

func (m *PushBlocks) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *PushBlocks) GetBlockCount() uint64 {
	if m != nil {
		return m.BlockCount
	}
	return 0
}

func (m *PushBlocks) GetData() []*BlockTx {
	if m != nil {
		return m.Data
	}
	return nil
}

// *
// * Signature for the previous block
type SignaturePreblock struct {
	ChainID []byte `protobuf:"bytes,5,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Round   uint32 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Height  uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	PubKey  []byte `protobuf:"bytes,3,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	SigData []byte `protobuf:"bytes,4,opt,name=SigData,proto3" json:"SigData,omitempty"`
}

func (m *SignaturePreblock) Reset()                    { *m = SignaturePreblock{} }
func (m *SignaturePreblock) String() string            { return proto.CompactTextString(m) }
func (*SignaturePreblock) ProtoMessage()               {}
func (*SignaturePreblock) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{31} }

func (m *SignaturePreblock) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *SignaturePreblock) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *SignaturePreblock) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SignaturePreblock) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *SignaturePreblock) GetSigData() []byte {
	if m != nil {
		return m.SigData
	}
	return nil
}

// *
// * Synchronization Request
type RequestSyn struct {
	ChainID       []byte `protobuf:"bytes,4,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	RequestHeight uint64 `protobuf:"varint,1,opt,name=RequestHeight,proto3" json:"RequestHeight,omitempty"`
	PubKey        []byte `protobuf:"bytes,2,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	SigData       []byte `protobuf:"bytes,3,opt,name=SigData,proto3" json:"SigData,omitempty"`
}

func (m *RequestSyn) Reset()                    { *m = RequestSyn{} }
func (m *RequestSyn) String() string            { return proto.CompactTextString(m) }
func (*RequestSyn) ProtoMessage()               {}
func (*RequestSyn) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{32} }

func (m *RequestSyn) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *RequestSyn) GetRequestHeight() uint64 {
	if m != nil {
		return m.RequestHeight
	}
	return 0
}

func (m *RequestSyn) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *RequestSyn) GetSigData() []byte {
	if m != nil {
		return m.SigData
	}
	return nil
}

// *
// * Timeout Message
type ToutMsg struct {
	ChainID     []byte `protobuf:"bytes,4,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	RoundNumber uint64 `protobuf:"varint,1,opt,name=RoundNumber,proto3" json:"RoundNumber,omitempty"`
	PubKey      []byte `protobuf:"bytes,2,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	SigData     []byte `protobuf:"bytes,3,opt,name=SigData,proto3" json:"SigData,omitempty"`
}

func (m *ToutMsg) Reset()                    { *m = ToutMsg{} }
func (m *ToutMsg) String() string            { return proto.CompactTextString(m) }
func (*ToutMsg) ProtoMessage()               {}
func (*ToutMsg) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{33} }

func (m *ToutMsg) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *ToutMsg) GetRoundNumber() uint64 {
	if m != nil {
		return m.RoundNumber
	}
	return 0
}

func (m *ToutMsg) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *ToutMsg) GetSigData() []byte {
	if m != nil {
		return m.SigData
	}
	return nil
}

// *
// * Synchronization block
type BlockSyn struct {
	ChainID []byte   `protobuf:"bytes,3,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	BlksynV *BlockTx `protobuf:"bytes,1,opt,name=Blksyn_v,json=BlksynV" json:"Blksyn_v,omitempty"`
	BlksynF *BlockTx `protobuf:"bytes,2,opt,name=Blksyn_f,json=BlksynF" json:"Blksyn_f,omitempty"`
}

func (m *BlockSyn) Reset()                    { *m = BlockSyn{} }
func (m *BlockSyn) String() string            { return proto.CompactTextString(m) }
func (*BlockSyn) ProtoMessage()               {}
func (*BlockSyn) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{34} }

func (m *BlockSyn) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *BlockSyn) GetBlksynV() *BlockTx {
	if m != nil {
		return m.BlksynV
	}
	return nil
}

func (m *BlockSyn) GetBlksynF() *BlockTx {
	if m != nil {
		return m.BlksynF
	}
	return nil
}

// *
// * Store Repo Stat Message
type StoreRepoStatMsg struct {
	PeerHash    []byte       `protobuf:"bytes,1,opt,name=peer_hash,json=peerHash,proto3" json:"peer_hash,omitempty"`
	ChainId     uint32       `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	RepoSize    uint64       `protobuf:"varint,3,opt,name=repo_size,json=repoSize,proto3" json:"repo_size,omitempty"`
	StorageMax  uint64       `protobuf:"varint,4,opt,name=storage_max,json=storageMax,proto3" json:"storage_max,omitempty"`
	NumObjects  uint64       `protobuf:"varint,5,opt,name=num_objects,json=numObjects,proto3" json:"num_objects,omitempty"`
	RandBlkInfo []*ShardInfo `protobuf:"bytes,6,rep,name=rand_blk_info,json=randBlkInfo" json:"rand_blk_info,omitempty"`
	BadBlocks   []*Cid       `protobuf:"bytes,7,rep,name=bad_blocks,json=badBlocks" json:"bad_blocks,omitempty"`
}

func (m *StoreRepoStatMsg) Reset()                    { *m = StoreRepoStatMsg{} }
func (m *StoreRepoStatMsg) String() string            { return proto.CompactTextString(m) }
func (*StoreRepoStatMsg) ProtoMessage()               {}
func (*StoreRepoStatMsg) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{35} }

func (m *StoreRepoStatMsg) GetPeerHash() []byte {
	if m != nil {
		return m.PeerHash
	}
	return nil
}

func (m *StoreRepoStatMsg) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *StoreRepoStatMsg) GetRepoSize() uint64 {
	if m != nil {
		return m.RepoSize
	}
	return 0
}

func (m *StoreRepoStatMsg) GetStorageMax() uint64 {
	if m != nil {
		return m.StorageMax
	}
	return 0
}

func (m *StoreRepoStatMsg) GetNumObjects() uint64 {
	if m != nil {
		return m.NumObjects
	}
	return 0
}

func (m *StoreRepoStatMsg) GetRandBlkInfo() []*ShardInfo {
	if m != nil {
		return m.RandBlkInfo
	}
	return nil
}

func (m *StoreRepoStatMsg) GetBadBlocks() []*Cid {
	if m != nil {
		return m.BadBlocks
	}
	return nil
}

// *
// * Shard info
type ShardInfo struct {
	ShardCid  *Cid   `protobuf:"bytes,1,opt,name=shard_cid,json=shardCid" json:"shard_cid,omitempty"`
	ShardSize uint64 `protobuf:"varint,2,opt,name=shard_size,json=shardSize,proto3" json:"shard_size,omitempty"`
}

func (m *ShardInfo) Reset()                    { *m = ShardInfo{} }
func (m *ShardInfo) String() string            { return proto.CompactTextString(m) }
func (*ShardInfo) ProtoMessage()               {}
func (*ShardInfo) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{36} }

func (m *ShardInfo) GetShardCid() *Cid {
	if m != nil {
		return m.ShardCid
	}
	return nil
}

func (m *ShardInfo) GetShardSize() uint64 {
	if m != nil {
		return m.ShardSize
	}
	return 0
}

// *
// * Shard cid
type Cid struct {
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Codec   uint64 `protobuf:"varint,2,opt,name=codec,proto3" json:"codec,omitempty"`
	Hash    []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Cid) Reset()                    { *m = Cid{} }
func (m *Cid) String() string            { return proto.CompactTextString(m) }
func (*Cid) ProtoMessage()               {}
func (*Cid) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{37} }

func (m *Cid) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Cid) GetCodec() uint64 {
	if m != nil {
		return m.Codec
	}
	return 0
}

func (m *Cid) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// Shard Block
type MinorBlockHeader struct {
	ChainID           []byte         `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Version           uint32         `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Height            uint64         `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty"`
	Timestamp         int64          `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	PrevHash          []byte         `protobuf:"bytes,5,opt,name=PrevHash,proto3" json:"PrevHash,omitempty"`
	TrxHashRoot       []byte         `protobuf:"bytes,6,opt,name=TrxHashRoot,proto3" json:"TrxHashRoot,omitempty"`
	StateDeltaHash    []byte         `protobuf:"bytes,7,opt,name=StateDeltaHash,proto3" json:"StateDeltaHash,omitempty"`
	CMBlockHash       []byte         `protobuf:"bytes,8,opt,name=CMBlockHash,proto3" json:"CMBlockHash,omitempty"`
	ProposalPublicKey []byte         `protobuf:"bytes,9,opt,name=ProposalPublicKey,proto3" json:"ProposalPublicKey,omitempty"`
	ConsData          *ConsensusData `protobuf:"bytes,10,opt,name=ConsData" json:"ConsData,omitempty"`
	ShardId           uint32         `protobuf:"varint,11,opt,name=ShardId,proto3" json:"ShardId,omitempty"`
	CMEpochNo         uint64         `protobuf:"varint,12,opt,name=CMEpochNo,proto3" json:"CMEpochNo,omitempty"`
	Receipt           *BlockReceipt  `protobuf:"bytes,13,opt,name=Receipt" json:"Receipt,omitempty"`
	Hash              []byte         `protobuf:"bytes,14,opt,name=Hash,proto3" json:"Hash,omitempty"`
	COSign            *COSign        `protobuf:"bytes,16,opt,name=COSign" json:"COSign,omitempty"`
}

func (m *MinorBlockHeader) Reset()                    { *m = MinorBlockHeader{} }
func (m *MinorBlockHeader) String() string            { return proto.CompactTextString(m) }
func (*MinorBlockHeader) ProtoMessage()               {}
func (*MinorBlockHeader) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{38} }

func (m *MinorBlockHeader) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *MinorBlockHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MinorBlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MinorBlockHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MinorBlockHeader) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *MinorBlockHeader) GetTrxHashRoot() []byte {
	if m != nil {
		return m.TrxHashRoot
	}
	return nil
}

func (m *MinorBlockHeader) GetStateDeltaHash() []byte {
	if m != nil {
		return m.StateDeltaHash
	}
	return nil
}

func (m *MinorBlockHeader) GetCMBlockHash() []byte {
	if m != nil {
		return m.CMBlockHash
	}
	return nil
}

func (m *MinorBlockHeader) GetProposalPublicKey() []byte {
	if m != nil {
		return m.ProposalPublicKey
	}
	return nil
}

func (m *MinorBlockHeader) GetConsData() *ConsensusData {
	if m != nil {
		return m.ConsData
	}
	return nil
}

func (m *MinorBlockHeader) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *MinorBlockHeader) GetCMEpochNo() uint64 {
	if m != nil {
		return m.CMEpochNo
	}
	return 0
}

func (m *MinorBlockHeader) GetReceipt() *BlockReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *MinorBlockHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *MinorBlockHeader) GetCOSign() *COSign {
	if m != nil {
		return m.COSign
	}
	return nil
}

type AccountMinor struct {
	AccountData []byte `protobuf:"bytes,4,opt,name=AccountData,proto3" json:"AccountData,omitempty"`
	Type        uint64 `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (m *AccountMinor) Reset()                    { *m = AccountMinor{} }
func (m *AccountMinor) String() string            { return proto.CompactTextString(m) }
func (*AccountMinor) ProtoMessage()               {}
func (*AccountMinor) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{39} }

func (m *AccountMinor) GetAccountData() []byte {
	if m != nil {
		return m.AccountData
	}
	return nil
}

func (m *AccountMinor) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

type MinorBlock struct {
	Header       *MinorBlockHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Transactions []*Transaction    `protobuf:"bytes,2,rep,name=Transactions" json:"Transactions,omitempty"`
	StateDelta   []*AccountMinor   `protobuf:"bytes,3,rep,name=StateDelta" json:"StateDelta,omitempty"`
}

func (m *MinorBlock) Reset()                    { *m = MinorBlock{} }
func (m *MinorBlock) String() string            { return proto.CompactTextString(m) }
func (*MinorBlock) ProtoMessage()               {}
func (*MinorBlock) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{40} }

func (m *MinorBlock) GetHeader() *MinorBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MinorBlock) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *MinorBlock) GetStateDelta() []*AccountMinor {
	if m != nil {
		return m.StateDelta
	}
	return nil
}

type NodeInfo struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	Port      string `protobuf:"bytes,3,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{41} }

func (m *NodeInfo) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *NodeInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NodeInfo) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type CMBlockHeader struct {
	ChainID      []byte         `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Version      uint32         `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Height       uint64         `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty"`
	Timestamp    int64          `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	PrevHash     []byte         `protobuf:"bytes,5,opt,name=PrevHash,proto3" json:"PrevHash,omitempty"`
	ConsData     *ConsensusData `protobuf:"bytes,6,opt,name=ConsData" json:"ConsData,omitempty"`
	LeaderPubKey []byte         `protobuf:"bytes,8,opt,name=LeaderPubKey,proto3" json:"LeaderPubKey,omitempty"`
	Nonce        uint32         `protobuf:"varint,9,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Candidate    *NodeInfo      `protobuf:"bytes,10,opt,name=Candidate" json:"Candidate,omitempty"`
	ShardsHash   []byte         `protobuf:"bytes,11,opt,name=ShardsHash,proto3" json:"ShardsHash,omitempty"`
	Hash         []byte         `protobuf:"bytes,12,opt,name=Hash,proto3" json:"Hash,omitempty"`
	COSign       *COSign        `protobuf:"bytes,16,opt,name=COSign" json:"COSign,omitempty"`
}

func (m *CMBlockHeader) Reset()                    { *m = CMBlockHeader{} }
func (m *CMBlockHeader) String() string            { return proto.CompactTextString(m) }
func (*CMBlockHeader) ProtoMessage()               {}
func (*CMBlockHeader) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{42} }

func (m *CMBlockHeader) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *CMBlockHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CMBlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CMBlockHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CMBlockHeader) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *CMBlockHeader) GetConsData() *ConsensusData {
	if m != nil {
		return m.ConsData
	}
	return nil
}

func (m *CMBlockHeader) GetLeaderPubKey() []byte {
	if m != nil {
		return m.LeaderPubKey
	}
	return nil
}

func (m *CMBlockHeader) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *CMBlockHeader) GetCandidate() *NodeInfo {
	if m != nil {
		return m.Candidate
	}
	return nil
}

func (m *CMBlockHeader) GetShardsHash() []byte {
	if m != nil {
		return m.ShardsHash
	}
	return nil
}

func (m *CMBlockHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *CMBlockHeader) GetCOSign() *COSign {
	if m != nil {
		return m.COSign
	}
	return nil
}

type NodeAddr struct {
	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Port    string `protobuf:"bytes,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (m *NodeAddr) Reset()                    { *m = NodeAddr{} }
func (m *NodeAddr) String() string            { return proto.CompactTextString(m) }
func (*NodeAddr) ProtoMessage()               {}
func (*NodeAddr) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{43} }

func (m *NodeAddr) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NodeAddr) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type Shard struct {
	Id         uint32      `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Member     []*NodeInfo `protobuf:"bytes,2,rep,name=Member" json:"Member,omitempty"`
	MemberAddr []*NodeAddr `protobuf:"bytes,3,rep,name=MemberAddr" json:"MemberAddr,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{44} }

func (m *Shard) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Shard) GetMember() []*NodeInfo {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *Shard) GetMemberAddr() []*NodeAddr {
	if m != nil {
		return m.MemberAddr
	}
	return nil
}

type CMBlock struct {
	Header *CMBlockHeader `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Shards []*Shard       `protobuf:"bytes,2,rep,name=Shards" json:"Shards,omitempty"`
}

func (m *CMBlock) Reset()                    { *m = CMBlock{} }
func (m *CMBlock) String() string            { return proto.CompactTextString(m) }
func (*CMBlock) ProtoMessage()               {}
func (*CMBlock) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{45} }

func (m *CMBlock) GetHeader() *CMBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CMBlock) GetShards() []*Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

type FinalBlockHeader struct {
	ChainID            []byte         `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Version            uint32         `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	PrevHash           []byte         `protobuf:"bytes,3,opt,name=PrevHash,proto3" json:"PrevHash,omitempty"`
	Height             uint64         `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
	Timestamp          int64          `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	TrxCount           uint32         `protobuf:"varint,6,opt,name=TrxCount,proto3" json:"TrxCount,omitempty"`
	ProposalPubKey     []byte         `protobuf:"bytes,7,opt,name=ProposalPubKey,proto3" json:"ProposalPubKey,omitempty"`
	EpochNo            uint64         `protobuf:"varint,8,opt,name=EpochNo,proto3" json:"EpochNo,omitempty"`
	CMBlockHash        []byte         `protobuf:"bytes,9,opt,name=CMBlockHash,proto3" json:"CMBlockHash,omitempty"`
	TrxRootHash        []byte         `protobuf:"bytes,10,opt,name=TrxRootHash,proto3" json:"TrxRootHash,omitempty"`
	StateDeltaRootHash []byte         `protobuf:"bytes,11,opt,name=StateDeltaRootHash,proto3" json:"StateDeltaRootHash,omitempty"`
	MinorBlocksHash    []byte         `protobuf:"bytes,12,opt,name=MinorBlocksHash,proto3" json:"MinorBlocksHash,omitempty"`
	StateHashRoot      []byte         `protobuf:"bytes,13,opt,name=StateHashRoot,proto3" json:"StateHashRoot,omitempty"`
	ConsData           *ConsensusData `protobuf:"bytes,14,opt,name=ConsData" json:"ConsData,omitempty"`
	Hash               []byte         `protobuf:"bytes,15,opt,name=Hash,proto3" json:"Hash,omitempty"`
	COSign             *COSign        `protobuf:"bytes,16,opt,name=COSign" json:"COSign,omitempty"`
}

func (m *FinalBlockHeader) Reset()                    { *m = FinalBlockHeader{} }
func (m *FinalBlockHeader) String() string            { return proto.CompactTextString(m) }
func (*FinalBlockHeader) ProtoMessage()               {}
func (*FinalBlockHeader) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{46} }

func (m *FinalBlockHeader) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *FinalBlockHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *FinalBlockHeader) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *FinalBlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *FinalBlockHeader) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FinalBlockHeader) GetTrxCount() uint32 {
	if m != nil {
		return m.TrxCount
	}
	return 0
}

func (m *FinalBlockHeader) GetProposalPubKey() []byte {
	if m != nil {
		return m.ProposalPubKey
	}
	return nil
}

func (m *FinalBlockHeader) GetEpochNo() uint64 {
	if m != nil {
		return m.EpochNo
	}
	return 0
}

func (m *FinalBlockHeader) GetCMBlockHash() []byte {
	if m != nil {
		return m.CMBlockHash
	}
	return nil
}

func (m *FinalBlockHeader) GetTrxRootHash() []byte {
	if m != nil {
		return m.TrxRootHash
	}
	return nil
}

func (m *FinalBlockHeader) GetStateDeltaRootHash() []byte {
	if m != nil {
		return m.StateDeltaRootHash
	}
	return nil
}

func (m *FinalBlockHeader) GetMinorBlocksHash() []byte {
	if m != nil {
		return m.MinorBlocksHash
	}
	return nil
}

func (m *FinalBlockHeader) GetStateHashRoot() []byte {
	if m != nil {
		return m.StateHashRoot
	}
	return nil
}

func (m *FinalBlockHeader) GetConsData() *ConsensusData {
	if m != nil {
		return m.ConsData
	}
	return nil
}

func (m *FinalBlockHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *FinalBlockHeader) GetCOSign() *COSign {
	if m != nil {
		return m.COSign
	}
	return nil
}

type FinalBlock struct {
	Header      *FinalBlockHeader   `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	MinorBlocks []*MinorBlockHeader `protobuf:"bytes,2,rep,name=MinorBlocks" json:"MinorBlocks,omitempty"`
}

func (m *FinalBlock) Reset()                    { *m = FinalBlock{} }
func (m *FinalBlock) String() string            { return proto.CompactTextString(m) }
func (*FinalBlock) ProtoMessage()               {}
func (*FinalBlock) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{47} }

func (m *FinalBlock) GetHeader() *FinalBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *FinalBlock) GetMinorBlocks() []*MinorBlockHeader {
	if m != nil {
		return m.MinorBlocks
	}
	return nil
}

type COSign struct {
	Step1 uint32 `protobuf:"varint,1,opt,name=Step1,proto3" json:"Step1,omitempty"`
	Step2 uint32 `protobuf:"varint,2,opt,name=Step2,proto3" json:"Step2,omitempty"`
}

func (m *COSign) Reset()                    { *m = COSign{} }
func (m *COSign) String() string            { return proto.CompactTextString(m) }
func (*COSign) ProtoMessage()               {}
func (*COSign) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{48} }

func (m *COSign) GetStep1() uint32 {
	if m != nil {
		return m.Step1
	}
	return 0
}

func (m *COSign) GetStep2() uint32 {
	if m != nil {
		return m.Step2
	}
	return 0
}

type P2PRtSyncMsg struct {
	Req []byte `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *P2PRtSyncMsg) Reset()                    { *m = P2PRtSyncMsg{} }
func (m *P2PRtSyncMsg) String() string            { return proto.CompactTextString(m) }
func (*P2PRtSyncMsg) ProtoMessage()               {}
func (*P2PRtSyncMsg) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{49} }

func (m *P2PRtSyncMsg) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

type PeerInfo struct {
	Id     []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ipport string `protobuf:"bytes,2,opt,name=ipport,proto3" json:"ipport,omitempty"`
}

func (m *PeerInfo) Reset()                    { *m = PeerInfo{} }
func (m *PeerInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()               {}
func (*PeerInfo) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{50} }

func (m *PeerInfo) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PeerInfo) GetIpport() string {
	if m != nil {
		return m.Ipport
	}
	return ""
}

type P2PRtSyncAckMsg struct {
	Resp  []byte      `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	Peers []*PeerInfo `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty"`
}

func (m *P2PRtSyncAckMsg) Reset()                    { *m = P2PRtSyncAckMsg{} }
func (m *P2PRtSyncAckMsg) String() string            { return proto.CompactTextString(m) }
func (*P2PRtSyncAckMsg) ProtoMessage()               {}
func (*P2PRtSyncAckMsg) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{51} }

func (m *P2PRtSyncAckMsg) GetResp() []byte {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *P2PRtSyncAckMsg) GetPeers() []*PeerInfo {
	if m != nil {
		return m.Peers
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "pb.Header")
	proto.RegisterType((*HeaderTx)(nil), "pb.HeaderTx")
	proto.RegisterType((*BlockTx)(nil), "pb.BlockTx")
	proto.RegisterType((*ConsensusData)(nil), "pb.ConsensusData")
	proto.RegisterType((*AbaBftData)(nil), "pb.AbaBftData")
	proto.RegisterType((*TxPayload)(nil), "pb.TxPayload")
	proto.RegisterType((*DeployInfo)(nil), "pb.DeployInfo")
	proto.RegisterType((*ParamData)(nil), "pb.ParamData")
	proto.RegisterType((*InvokeInfo)(nil), "pb.InvokeInfo")
	proto.RegisterType((*TransactionReceipt)(nil), "pb.TransactionReceipt")
	proto.RegisterType((*BlockReceipt)(nil), "pb.BlockReceipt")
	proto.RegisterType((*Transaction)(nil), "pb.Transaction")
	proto.RegisterType((*ConsensusState)(nil), "pb.ConsensusState")
	proto.RegisterType((*Miner)(nil), "pb.Miner")
	proto.RegisterType((*Signature)(nil), "pb.Signature")
	proto.RegisterType((*AccountWeight)(nil), "pb.account_weight")
	proto.RegisterType((*KeyWeight)(nil), "pb.key_weight")
	proto.RegisterType((*Permission)(nil), "pb.Permission")
	proto.RegisterType((*Ram)(nil), "pb.Ram")
	proto.RegisterType((*Res)(nil), "pb.Res")
	proto.RegisterType((*Delegate)(nil), "pb.Delegate")
	proto.RegisterType((*Producer)(nil), "pb.Producer")
	proto.RegisterType((*Votes)(nil), "pb.Votes")
	proto.RegisterType((*Account)(nil), "pb.Account")
	proto.RegisterType((*TokenInfo)(nil), "pb.TokenInfo")
	proto.RegisterType((*Token)(nil), "pb.Token")
	proto.RegisterType((*Contract)(nil), "pb.Contract")
	proto.RegisterType((*BlockCt)(nil), "pb.BlockCt")
	proto.RegisterType((*PullBlocksRequest)(nil), "pb.PullBlocksRequest")
	proto.RegisterType((*PullBlocksResponse)(nil), "pb.PullBlocksResponse")
	proto.RegisterType((*PushBlocks)(nil), "pb.PushBlocks")
	proto.RegisterType((*SignaturePreblock)(nil), "pb.SignaturePreblock")
	proto.RegisterType((*RequestSyn)(nil), "pb.RequestSyn")
	proto.RegisterType((*ToutMsg)(nil), "pb.ToutMsg")
	proto.RegisterType((*BlockSyn)(nil), "pb.BlockSyn")
	proto.RegisterType((*StoreRepoStatMsg)(nil), "pb.StoreRepoStatMsg")
	proto.RegisterType((*ShardInfo)(nil), "pb.ShardInfo")
	proto.RegisterType((*Cid)(nil), "pb.Cid")
	proto.RegisterType((*MinorBlockHeader)(nil), "pb.MinorBlockHeader")
	proto.RegisterType((*AccountMinor)(nil), "pb.AccountMinor")
	proto.RegisterType((*MinorBlock)(nil), "pb.MinorBlock")
	proto.RegisterType((*NodeInfo)(nil), "pb.NodeInfo")
	proto.RegisterType((*CMBlockHeader)(nil), "pb.CMBlockHeader")
	proto.RegisterType((*NodeAddr)(nil), "pb.NodeAddr")
	proto.RegisterType((*Shard)(nil), "pb.Shard")
	proto.RegisterType((*CMBlock)(nil), "pb.CMBlock")
	proto.RegisterType((*FinalBlockHeader)(nil), "pb.FinalBlockHeader")
	proto.RegisterType((*FinalBlock)(nil), "pb.FinalBlock")
	proto.RegisterType((*COSign)(nil), "pb.COSign")
	proto.RegisterType((*P2PRtSyncMsg)(nil), "pb.P2PRtSyncMsg")
	proto.RegisterType((*PeerInfo)(nil), "pb.PeerInfo")
	proto.RegisterType((*P2PRtSyncAckMsg)(nil), "pb.P2PRtSyncAckMsg")
}
func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Timestamp))
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Height))
	}
	if len(m.PrevHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PrevHash)))
		i += copy(dAtA[i:], m.PrevHash)
	}
	if len(m.MerkleHash) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.MerkleHash)))
		i += copy(dAtA[i:], m.MerkleHash)
	}
	if len(m.StateHash) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.StateHash)))
		i += copy(dAtA[i:], m.StateHash)
	}
	if m.ConsensusData != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ConsensusData.Size()))
		n1, err := m.ConsensusData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Bloom) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Bloom)))
		i += copy(dAtA[i:], m.Bloom)
	}
	if len(m.ChainID) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i += copy(dAtA[i:], m.ChainID)
	}
	if m.Type != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Type))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *HeaderTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeaderTx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Header.Size()))
		n2, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Receipt != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Receipt.Size()))
		n3, err := m.Receipt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Sign) > 0 {
		for _, msg := range m.Sign {
			dAtA[i] = 0x32
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BlockHash) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.BlockHash)))
		i += copy(dAtA[i:], m.BlockHash)
	}
	return i, nil
}

func (m *BlockTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockTx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Header.Size()))
		n4, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0x22
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ConsensusData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Type))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *AbaBftData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbaBftData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumberRound != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.NumberRound))
	}
	if len(m.Sign) > 0 {
		for _, msg := range m.Sign {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TxPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
	}
	if m.From != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.From))
	}
	if m.Addr != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Addr))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Nonce))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Timestamp))
	}
	if m.Type != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Type))
	}
	if len(m.Permission) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Permission)))
		i += copy(dAtA[i:], m.Permission)
	}
	if len(m.ChainID) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i += copy(dAtA[i:], m.ChainID)
	}
	return i, nil
}

func (m *DeployInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeployInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Describe) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Describe)))
		i += copy(dAtA[i:], m.Describe)
	}
	if m.TypeVm != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.TypeVm))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Abi) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Abi)))
		i += copy(dAtA[i:], m.Abi)
	}
	return i, nil
}

func (m *ParamData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Param) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Param)))
		i += copy(dAtA[i:], m.Param)
	}
	return i, nil
}

func (m *InvokeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvokeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Param) > 0 {
		for _, msg := range m.Param {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TransactionReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionReceipt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Cpu != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Cpu))))
		i += 8
	}
	if m.Net != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Net))))
		i += 8
	}
	if len(m.Result) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.From != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.From))
	}
	if m.To != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.To))
	}
	if len(m.TokenName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.TokenName)))
		i += copy(dAtA[i:], m.TokenName)
	}
	if len(m.Accounts) > 0 {
		for _, b := range m.Accounts {
			dAtA[i] = 0x42
			i++
			i = encodeVarintBlock(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NewToken) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.NewToken)))
		i += copy(dAtA[i:], m.NewToken)
	}
	if len(m.Amount) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Amount)))
		i += copy(dAtA[i:], m.Amount)
	}
	if m.Producer != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Producer))
	}
	return i, nil
}

func (m *BlockReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockReceipt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BlockCpu != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BlockCpu))))
		i += 8
	}
	if m.BlockNet != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BlockNet))))
		i += 8
	}
	return i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Payload.Size()))
		n5, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Sign) > 0 {
		for _, msg := range m.Sign {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.Receipt) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Receipt)))
		i += copy(dAtA[i:], m.Receipt)
	}
	return i, nil
}

func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Bookkeepers) > 0 {
		for _, msg := range m.Bookkeepers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *Miner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Miner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PubKey)))
		i += copy(dAtA[i:], m.PubKey)
	}
	if len(m.SigData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.SigData)))
		i += copy(dAtA[i:], m.SigData)
	}
	if len(m.ChainID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i += copy(dAtA[i:], m.ChainID)
	}
	return i, nil
}

func (m *AccountWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountWeight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Actor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Actor))
	}
	if m.Weight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Weight))
	}
	if len(m.Permission) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Permission)))
		i += copy(dAtA[i:], m.Permission)
	}
	return i, nil
}

func (m *KeyWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyWeight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Actor) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Actor)))
		i += copy(dAtA[i:], m.Actor)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Weight))
	}
	return i, nil
}

func (m *Permission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permission) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Threshold))
	}
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Accounts) > 0 {
		for _, msg := range m.Accounts {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PermName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PermName)))
		i += copy(dAtA[i:], m.PermName)
	}
	if len(m.Parent) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Parent)))
		i += copy(dAtA[i:], m.Parent)
	}
	return i, nil
}

func (m *Ram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ram) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Quota != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Quota))))
		i += 8
	}
	if m.Used != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Used))))
		i += 8
	}
	return i, nil
}

func (m *Res) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Res) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Staked != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Staked))
	}
	if m.Used != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Used))))
		i += 8
	}
	if m.Available != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Available))))
		i += 8
	}
	if m.Limit != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Limit))))
		i += 8
	}
	if m.Delegated != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Delegated))
	}
	return i, nil
}

func (m *Delegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Index))
	}
	if m.Cpu != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Cpu))
	}
	if m.Net != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Net))
	}
	return i, nil
}

func (m *Producer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Producer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccountName != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.AccountName))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *Votes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Votes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Staked != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Staked))
	}
	if len(m.Producers) > 0 {
		for _, msg := range m.Producers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for _, msg := range m.Permissions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Contract != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Contract.Size()))
		n6, err := m.Contract.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Tokens) > 0 {
		for _, msg := range m.Tokens {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Index != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Index))
	}
	if m.TimeStamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.TimeStamp))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Ram != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Ram.Size()))
		n7, err := m.Ram.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Cpu != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Cpu.Size()))
		n8, err := m.Cpu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Net != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Net.Size()))
		n9, err := m.Net.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.Delegates) > 0 {
		for _, msg := range m.Delegates {
			dAtA[i] = 0x52
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Votes != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Votes.Size()))
		n10, err := m.Votes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *TokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	if m.MaxSupply != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.MaxSupply))
	}
	if m.Supply != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Supply))
	}
	if m.Issuer != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Issuer))
	}
	return i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Balance)))
		i += copy(dAtA[i:], m.Balance)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActionType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ActionType))
	}
	if len(m.Config) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Config)))
		i += copy(dAtA[i:], m.Config)
	}
	return i, nil
}

func (m *BlockCt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockCt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Header.Size()))
		n11, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Contracts) > 0 {
		for _, msg := range m.Contracts {
			dAtA[i] = 0x22
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PullBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PeerHash)))
		i += copy(dAtA[i:], m.PeerHash)
	}
	if m.ChainId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ChainId))
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func (m *PullBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PeerHash)))
		i += copy(dAtA[i:], m.PeerHash)
	}
	if m.ChainId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ChainId))
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Height))
	}
	if m.BlockCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.BlockCount))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PushBlocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushBlocks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ChainId))
	}
	if m.BlockCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.BlockCount))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SignaturePreblock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignaturePreblock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Round))
	}
	if m.Height != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Height))
	}
	if len(m.PubKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PubKey)))
		i += copy(dAtA[i:], m.PubKey)
	}
	if len(m.SigData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.SigData)))
		i += copy(dAtA[i:], m.SigData)
	}
	if len(m.ChainID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i += copy(dAtA[i:], m.ChainID)
	}
	return i, nil
}

func (m *RequestSyn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSyn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestHeight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.RequestHeight))
	}
	if len(m.PubKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PubKey)))
		i += copy(dAtA[i:], m.PubKey)
	}
	if len(m.SigData) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.SigData)))
		i += copy(dAtA[i:], m.SigData)
	}
	if len(m.ChainID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i += copy(dAtA[i:], m.ChainID)
	}
	return i, nil
}

func (m *ToutMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToutMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoundNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.RoundNumber))
	}
	if len(m.PubKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PubKey)))
		i += copy(dAtA[i:], m.PubKey)
	}
	if len(m.SigData) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.SigData)))
		i += copy(dAtA[i:], m.SigData)
	}
	if len(m.ChainID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i += copy(dAtA[i:], m.ChainID)
	}
	return i, nil
}

func (m *BlockSyn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockSyn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BlksynV != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.BlksynV.Size()))
		n12, err := m.BlksynV.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.BlksynF != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.BlksynF.Size()))
		n13, err := m.BlksynF.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.ChainID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i += copy(dAtA[i:], m.ChainID)
	}
	return i, nil
}

func (m *StoreRepoStatMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreRepoStatMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PeerHash)))
		i += copy(dAtA[i:], m.PeerHash)
	}
	if m.ChainId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ChainId))
	}
	if m.RepoSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.RepoSize))
	}
	if m.StorageMax != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.StorageMax))
	}
	if m.NumObjects != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.NumObjects))
	}
	if len(m.RandBlkInfo) > 0 {
		for _, msg := range m.RandBlkInfo {
			dAtA[i] = 0x32
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BadBlocks) > 0 {
		for _, msg := range m.BadBlocks {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ShardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardCid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ShardCid.Size()))
		n14, err := m.ShardCid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.ShardSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ShardSize))
	}
	return i, nil
}

func (m *Cid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cid) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
	}
	if m.Codec != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Codec))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *MinorBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinorBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i += copy(dAtA[i:], m.ChainID)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Height))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.PrevHash) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PrevHash)))
		i += copy(dAtA[i:], m.PrevHash)
	}
	if len(m.TrxHashRoot) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.TrxHashRoot)))
		i += copy(dAtA[i:], m.TrxHashRoot)
	}
	if len(m.StateDeltaHash) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.StateDeltaHash)))
		i += copy(dAtA[i:], m.StateDeltaHash)
	}
	if len(m.CMBlockHash) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.CMBlockHash)))
		i += copy(dAtA[i:], m.CMBlockHash)
	}
	if len(m.ProposalPublicKey) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ProposalPublicKey)))
		i += copy(dAtA[i:], m.ProposalPublicKey)
	}
	if m.ConsData != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ConsData.Size()))
		n15, err := m.ConsData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.ShardId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ShardId))
	}
	if m.CMEpochNo != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.CMEpochNo))
	}
	if m.Receipt != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Receipt.Size()))
		n16, err := m.Receipt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.COSign != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.COSign.Size()))
		n17, err := m.COSign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *AccountMinor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMinor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Type))
	}
	if len(m.AccountData) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.AccountData)))
		i += copy(dAtA[i:], m.AccountData)
	}
	return i, nil
}

func (m *MinorBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinorBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Header.Size()))
		n18, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.StateDelta) > 0 {
		for _, msg := range m.StateDelta {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Port) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Port)))
		i += copy(dAtA[i:], m.Port)
	}
	return i, nil
}

func (m *CMBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i += copy(dAtA[i:], m.ChainID)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Height))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.PrevHash) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PrevHash)))
		i += copy(dAtA[i:], m.PrevHash)
	}
	if m.ConsData != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ConsData.Size()))
		n19, err := m.ConsData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.LeaderPubKey) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.LeaderPubKey)))
		i += copy(dAtA[i:], m.LeaderPubKey)
	}
	if m.Nonce != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Nonce))
	}
	if m.Candidate != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Candidate.Size()))
		n20, err := m.Candidate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if len(m.ShardsHash) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ShardsHash)))
		i += copy(dAtA[i:], m.ShardsHash)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.COSign != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.COSign.Size()))
		n21, err := m.COSign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *NodeAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeAddr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Port) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Port)))
		i += copy(dAtA[i:], m.Port)
	}
	return i, nil
}

func (m *Shard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Id))
	}
	if len(m.Member) > 0 {
		for _, msg := range m.Member {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MemberAddr) > 0 {
		for _, msg := range m.MemberAddr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CMBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Header.Size()))
		n22, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if len(m.Shards) > 0 {
		for _, msg := range m.Shards {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FinalBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i += copy(dAtA[i:], m.ChainID)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
	}
	if len(m.PrevHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PrevHash)))
		i += copy(dAtA[i:], m.PrevHash)
	}
	if m.Height != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Height))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Timestamp))
	}
	if m.TrxCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.TrxCount))
	}
	if len(m.ProposalPubKey) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ProposalPubKey)))
		i += copy(dAtA[i:], m.ProposalPubKey)
	}
	if m.EpochNo != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.EpochNo))
	}
	if len(m.CMBlockHash) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.CMBlockHash)))
		i += copy(dAtA[i:], m.CMBlockHash)
	}
	if len(m.TrxRootHash) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.TrxRootHash)))
		i += copy(dAtA[i:], m.TrxRootHash)
	}
	if len(m.StateDeltaRootHash) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.StateDeltaRootHash)))
		i += copy(dAtA[i:], m.StateDeltaRootHash)
	}
	if len(m.MinorBlocksHash) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.MinorBlocksHash)))
		i += copy(dAtA[i:], m.MinorBlocksHash)
	}
	if len(m.StateHashRoot) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.StateHashRoot)))
		i += copy(dAtA[i:], m.StateHashRoot)
	}
	if m.ConsData != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.ConsData.Size()))
		n23, err := m.ConsData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.COSign != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.COSign.Size()))
		n24, err := m.COSign.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *FinalBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Header.Size()))
		n25, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if len(m.MinorBlocks) > 0 {
		for _, msg := range m.MinorBlocks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *COSign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *COSign) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Step1 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Step1))
	}
	if m.Step2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Step2))
	}
	return i, nil
}

func (m *P2PRtSyncMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P2PRtSyncMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Req) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Req)))
		i += copy(dAtA[i:], m.Req)
	}
	return i, nil
}

func (m *PeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Ipport) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Ipport)))
		i += copy(dAtA[i:], m.Ipport)
	}
	return i, nil
}

func (m *P2PRtSyncAckMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P2PRtSyncAckMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Resp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Resp)))
		i += copy(dAtA[i:], m.Resp)
	}
	if len(m.Peers) > 0 {
		for _, msg := range m.Peers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintBlock(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Header) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBlock(uint64(m.Timestamp))
	}
	if m.Height != 0 {
		n += 1 + sovBlock(uint64(m.Height))
	}
	l = len(m.PrevHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.MerkleHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.StateHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ConsensusData != nil {
		l = m.ConsensusData.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Bloom)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovBlock(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *HeaderTx) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Receipt != nil {
		l = m.Receipt.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Sign) > 0 {
		for _, e := range m.Sign {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *BlockTx) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *ConsensusData) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBlock(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *AbaBftData) Size() (n int) {
	var l int
	_ = l
	if m.NumberRound != 0 {
		n += 1 + sovBlock(uint64(m.NumberRound))
	}
	if len(m.Sign) > 0 {
		for _, e := range m.Sign {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *TxPayload) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	if m.From != 0 {
		n += 1 + sovBlock(uint64(m.From))
	}
	if m.Addr != 0 {
		n += 1 + sovBlock(uint64(m.Addr))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovBlock(uint64(m.Nonce))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBlock(uint64(m.Timestamp))
	}
	if m.Type != 0 {
		n += 1 + sovBlock(uint64(m.Type))
	}
	l = len(m.Permission)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *DeployInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Describe)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.TypeVm != 0 {
		n += 1 + sovBlock(uint64(m.TypeVm))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Abi)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *ParamData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *InvokeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Param) > 0 {
		for _, e := range m.Param {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *TransactionReceipt) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Cpu != 0 {
		n += 9
	}
	if m.Net != 0 {
		n += 9
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovBlock(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovBlock(uint64(m.To))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Accounts) > 0 {
		for _, b := range m.Accounts {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	l = len(m.NewToken)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Producer != 0 {
		n += 1 + sovBlock(uint64(m.Producer))
	}
	return n
}

func (m *BlockReceipt) Size() (n int) {
	var l int
	_ = l
	if m.BlockCpu != 0 {
		n += 9
	}
	if m.BlockNet != 0 {
		n += 9
	}
	return n
}

func (m *Transaction) Size() (n int) {
	var l int
	_ = l
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Sign) > 0 {
		for _, e := range m.Sign {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Receipt)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *ConsensusState) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovBlock(uint64(m.Timestamp))
	}
	if len(m.Bookkeepers) > 0 {
		for _, e := range m.Bookkeepers {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *Miner) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *Signature) Size() (n int) {
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.SigData)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *AccountWeight) Size() (n int) {
	var l int
	_ = l
	if m.Actor != 0 {
		n += 1 + sovBlock(uint64(m.Actor))
	}
	if m.Weight != 0 {
		n += 1 + sovBlock(uint64(m.Weight))
	}
	l = len(m.Permission)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *KeyWeight) Size() (n int) {
	var l int
	_ = l
	l = len(m.Actor)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovBlock(uint64(m.Weight))
	}
	return n
}

func (m *Permission) Size() (n int) {
	var l int
	_ = l
	if m.Threshold != 0 {
		n += 1 + sovBlock(uint64(m.Threshold))
	}
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	l = len(m.PermName)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *Ram) Size() (n int) {
	var l int
	_ = l
	if m.Quota != 0 {
		n += 9
	}
	if m.Used != 0 {
		n += 9
	}
	return n
}

func (m *Res) Size() (n int) {
	var l int
	_ = l
	if m.Staked != 0 {
		n += 1 + sovBlock(uint64(m.Staked))
	}
	if m.Used != 0 {
		n += 9
	}
	if m.Available != 0 {
		n += 9
	}
	if m.Limit != 0 {
		n += 9
	}
	if m.Delegated != 0 {
		n += 1 + sovBlock(uint64(m.Delegated))
	}
	return n
}

func (m *Delegate) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovBlock(uint64(m.Index))
	}
	if m.Cpu != 0 {
		n += 1 + sovBlock(uint64(m.Cpu))
	}
	if m.Net != 0 {
		n += 1 + sovBlock(uint64(m.Net))
	}
	return n
}

func (m *Producer) Size() (n int) {
	var l int
	_ = l
	if m.AccountName != 0 {
		n += 1 + sovBlock(uint64(m.AccountName))
	}
	if m.Amount != 0 {
		n += 1 + sovBlock(uint64(m.Amount))
	}
	return n
}

func (m *Votes) Size() (n int) {
	var l int
	_ = l
	if m.Staked != 0 {
		n += 1 + sovBlock(uint64(m.Staked))
	}
	if len(m.Producers) > 0 {
		for _, e := range m.Producers {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *Account) Size() (n int) {
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for _, e := range m.Permissions {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.Contract != nil {
		l = m.Contract.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.Index != 0 {
		n += 1 + sovBlock(uint64(m.Index))
	}
	if m.TimeStamp != 0 {
		n += 1 + sovBlock(uint64(m.TimeStamp))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Ram != nil {
		l = m.Ram.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Cpu != nil {
		l = m.Cpu.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Net != nil {
		l = m.Net.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Delegates) > 0 {
		for _, e := range m.Delegates {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.Votes != nil {
		l = m.Votes.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *TokenInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.MaxSupply != 0 {
		n += 1 + sovBlock(uint64(m.MaxSupply))
	}
	if m.Supply != 0 {
		n += 1 + sovBlock(uint64(m.Supply))
	}
	if m.Issuer != 0 {
		n += 1 + sovBlock(uint64(m.Issuer))
	}
	return n
}

func (m *Token) Size() (n int) {
	var l int
	_ = l
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *Contract) Size() (n int) {
	var l int
	_ = l
	if m.ActionType != 0 {
		n += 1 + sovBlock(uint64(m.ActionType))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *BlockCt) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *PullBlocksRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.PeerHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovBlock(uint64(m.ChainId))
	}
	if m.Height != 0 {
		n += 1 + sovBlock(uint64(m.Height))
	}
	return n
}

func (m *PullBlocksResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.PeerHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovBlock(uint64(m.ChainId))
	}
	if m.Height != 0 {
		n += 1 + sovBlock(uint64(m.Height))
	}
	if m.BlockCount != 0 {
		n += 1 + sovBlock(uint64(m.BlockCount))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *PushBlocks) Size() (n int) {
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovBlock(uint64(m.ChainId))
	}
	if m.BlockCount != 0 {
		n += 1 + sovBlock(uint64(m.BlockCount))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *SignaturePreblock) Size() (n int) {
	var l int
	_ = l
	if m.Round != 0 {
		n += 1 + sovBlock(uint64(m.Round))
	}
	if m.Height != 0 {
		n += 1 + sovBlock(uint64(m.Height))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.SigData)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *RequestSyn) Size() (n int) {
	var l int
	_ = l
	if m.RequestHeight != 0 {
		n += 1 + sovBlock(uint64(m.RequestHeight))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.SigData)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *ToutMsg) Size() (n int) {
	var l int
	_ = l
	if m.RoundNumber != 0 {
		n += 1 + sovBlock(uint64(m.RoundNumber))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.SigData)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *BlockSyn) Size() (n int) {
	var l int
	_ = l
	if m.BlksynV != nil {
		l = m.BlksynV.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.BlksynF != nil {
		l = m.BlksynF.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *StoreRepoStatMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.PeerHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovBlock(uint64(m.ChainId))
	}
	if m.RepoSize != 0 {
		n += 1 + sovBlock(uint64(m.RepoSize))
	}
	if m.StorageMax != 0 {
		n += 1 + sovBlock(uint64(m.StorageMax))
	}
	if m.NumObjects != 0 {
		n += 1 + sovBlock(uint64(m.NumObjects))
	}
	if len(m.RandBlkInfo) > 0 {
		for _, e := range m.RandBlkInfo {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if len(m.BadBlocks) > 0 {
		for _, e := range m.BadBlocks {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *ShardInfo) Size() (n int) {
	var l int
	_ = l
	if m.ShardCid != nil {
		l = m.ShardCid.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ShardSize != 0 {
		n += 1 + sovBlock(uint64(m.ShardSize))
	}
	return n
}

func (m *Cid) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	if m.Codec != 0 {
		n += 1 + sovBlock(uint64(m.Codec))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *MinorBlockHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	if m.Height != 0 {
		n += 1 + sovBlock(uint64(m.Height))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBlock(uint64(m.Timestamp))
	}
	l = len(m.PrevHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.TrxHashRoot)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.StateDeltaHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.CMBlockHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ProposalPublicKey)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ConsData != nil {
		l = m.ConsData.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ShardId != 0 {
		n += 1 + sovBlock(uint64(m.ShardId))
	}
	if m.CMEpochNo != 0 {
		n += 1 + sovBlock(uint64(m.CMEpochNo))
	}
	if m.Receipt != nil {
		l = m.Receipt.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.COSign != nil {
		l = m.COSign.Size()
		n += 2 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *AccountMinor) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBlock(uint64(m.Type))
	}
	l = len(m.AccountData)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *MinorBlock) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if len(m.StateDelta) > 0 {
		for _, e := range m.StateDelta {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *NodeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *CMBlockHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	if m.Height != 0 {
		n += 1 + sovBlock(uint64(m.Height))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBlock(uint64(m.Timestamp))
	}
	l = len(m.PrevHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ConsData != nil {
		l = m.ConsData.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.LeaderPubKey)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovBlock(uint64(m.Nonce))
	}
	if m.Candidate != nil {
		l = m.Candidate.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ShardsHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.COSign != nil {
		l = m.COSign.Size()
		n += 2 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *NodeAddr) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *Shard) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBlock(uint64(m.Id))
	}
	if len(m.Member) > 0 {
		for _, e := range m.Member {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if len(m.MemberAddr) > 0 {
		for _, e := range m.MemberAddr {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *CMBlock) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *FinalBlockHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	l = len(m.PrevHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBlock(uint64(m.Height))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBlock(uint64(m.Timestamp))
	}
	if m.TrxCount != 0 {
		n += 1 + sovBlock(uint64(m.TrxCount))
	}
	l = len(m.ProposalPubKey)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.EpochNo != 0 {
		n += 1 + sovBlock(uint64(m.EpochNo))
	}
	l = len(m.CMBlockHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.TrxRootHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.StateDeltaRootHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.MinorBlocksHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.StateHashRoot)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ConsData != nil {
		l = m.ConsData.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.COSign != nil {
		l = m.COSign.Size()
		n += 2 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *FinalBlock) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.MinorBlocks) > 0 {
		for _, e := range m.MinorBlocks {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func (m *COSign) Size() (n int) {
	var l int
	_ = l
	if m.Step1 != 0 {
		n += 1 + sovBlock(uint64(m.Step1))
	}
	if m.Step2 != 0 {
		n += 1 + sovBlock(uint64(m.Step2))
	}
	return n
}

func (m *P2PRtSyncMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *PeerInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Ipport)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *P2PRtSyncAckMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Resp)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func sovBlock(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBlock(x uint64) (n int) {
	return sovBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevHash = append(m.PrevHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevHash == nil {
				m.PrevHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleHash = append(m.MerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MerkleHash == nil {
				m.MerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateHash = append(m.StateHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StateHash == nil {
				m.StateHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusData == nil {
				m.ConsensusData = &ConsensusData{}
			}
			if err := m.ConsensusData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bloom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bloom = append(m.Bloom[:0], dAtA[iNdEx:postIndex]...)
			if m.Bloom == nil {
				m.Bloom = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeaderTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeaderTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeaderTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receipt == nil {
				m.Receipt = &BlockReceipt{}
			}
			if err := m.Receipt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign, &Signature{})
			if err := m.Sign[len(m.Sign)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &HeaderTx{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AbaBftData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbaBftData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbaBftData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberRound", wireType)
			}
			m.NumberRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberRound |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign, &Signature{})
			if err := m.Sign[len(m.Sign)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = append(m.Permission[:0], dAtA[iNdEx:postIndex]...)
			if m.Permission == nil {
				m.Permission = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Describe", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Describe = append(m.Describe[:0], dAtA[iNdEx:postIndex]...)
			if m.Describe == nil {
				m.Describe = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeVm", wireType)
			}
			m.TypeVm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeVm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abi", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abi = append(m.Abi[:0], dAtA[iNdEx:postIndex]...)
			if m.Abi == nil {
				m.Abi = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = append(m.Param[:0], dAtA[iNdEx:postIndex]...)
			if m.Param == nil {
				m.Param = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvokeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvokeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvokeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = append(m.Method[:0], dAtA[iNdEx:postIndex]...)
			if m.Method == nil {
				m.Method = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = append(m.Param, &ParamData{})
			if err := m.Param[len(m.Param)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Cpu = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Net", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Net = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, make([]byte, postIndex-iNdEx))
			copy(m.Accounts[len(m.Accounts)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewToken = append(m.NewToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NewToken == nil {
				m.NewToken = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount[:0], dAtA[iNdEx:postIndex]...)
			if m.Amount == nil {
				m.Amount = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producer", wireType)
			}
			m.Producer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Producer |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCpu", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BlockCpu = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNet", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BlockNet = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &TxPayload{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign, &Signature{})
			if err := m.Sign[len(m.Sign)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipt = append(m.Receipt[:0], dAtA[iNdEx:postIndex]...)
			if m.Receipt == nil {
				m.Receipt = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bookkeepers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bookkeepers = append(m.Bookkeepers, &Miner{})
			if err := m.Bookkeepers[len(m.Bookkeepers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Miner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Miner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Miner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigData = append(m.SigData[:0], dAtA[iNdEx:postIndex]...)
			if m.SigData == nil {
				m.SigData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: account_weight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: account_weight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			m.Actor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Actor |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permission = append(m.Permission[:0], dAtA[iNdEx:postIndex]...)
			if m.Permission == nil {
				m.Permission = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: key_weight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: key_weight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actor = append(m.Actor[:0], dAtA[iNdEx:postIndex]...)
			if m.Actor == nil {
				m.Actor = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Permission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &KeyWeight{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &AccountWeight{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermName = append(m.PermName[:0], dAtA[iNdEx:postIndex]...)
			if m.PermName == nil {
				m.PermName = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = append(m.Parent[:0], dAtA[iNdEx:postIndex]...)
			if m.Parent == nil {
				m.Parent = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Quota = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Used = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Res) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Res: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Res: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			m.Staked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Staked |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Used = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Available = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Limit = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegated", wireType)
			}
			m.Delegated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delegated |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			m.Cpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpu |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Net", wireType)
			}
			m.Net = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Net |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Producer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Producer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Producer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			m.AccountName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountName |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Votes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Votes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Votes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			m.Staked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Staked |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Producers = append(m.Producers, &Producer{})
			if err := m.Producers[len(m.Producers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, &Permission{})
			if err := m.Permissions[len(m.Permissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract == nil {
				m.Contract = &DeployInfo{}
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &Token{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ram", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ram == nil {
				m.Ram = &Ram{}
			}
			if err := m.Ram.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cpu == nil {
				m.Cpu = &Res{}
			}
			if err := m.Cpu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Net", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Net == nil {
				m.Net = &Res{}
			}
			if err := m.Net.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegates = append(m.Delegates, &Delegate{})
			if err := m.Delegates[len(m.Delegates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Votes == nil {
				m.Votes = &Votes{}
			}
			if err := m.Votes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			m.MaxSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSupply |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			m.Supply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Supply |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			m.Issuer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Issuer |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance[:0], dAtA[iNdEx:postIndex]...)
			if m.Balance == nil {
				m.Balance = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			m.ActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockCt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockCt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockCt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &HeaderTx{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, &Contract{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerHash = append(m.PeerHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerHash == nil {
				m.PeerHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerHash = append(m.PeerHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerHash == nil {
				m.PeerHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCount", wireType)
			}
			m.BlockCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &BlockTx{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushBlocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushBlocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushBlocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCount", wireType)
			}
			m.BlockCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &BlockTx{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignaturePreblock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignaturePreblock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignaturePreblock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigData = append(m.SigData[:0], dAtA[iNdEx:postIndex]...)
			if m.SigData == nil {
				m.SigData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSyn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSyn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSyn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeight", wireType)
			}
			m.RequestHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestHeight |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigData = append(m.SigData[:0], dAtA[iNdEx:postIndex]...)
			if m.SigData == nil {
				m.SigData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToutMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToutMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToutMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundNumber", wireType)
			}
			m.RoundNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigData = append(m.SigData[:0], dAtA[iNdEx:postIndex]...)
			if m.SigData == nil {
				m.SigData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockSyn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockSyn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockSyn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlksynV", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlksynV == nil {
				m.BlksynV = &BlockTx{}
			}
			if err := m.BlksynV.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlksynF", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlksynF == nil {
				m.BlksynF = &BlockTx{}
			}
			if err := m.BlksynF.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreRepoStatMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreRepoStatMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreRepoStatMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerHash = append(m.PeerHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerHash == nil {
				m.PeerHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepoSize", wireType)
			}
			m.RepoSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepoSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageMax", wireType)
			}
			m.StorageMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageMax |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumObjects", wireType)
			}
			m.NumObjects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumObjects |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandBlkInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandBlkInfo = append(m.RandBlkInfo, &ShardInfo{})
			if err := m.RandBlkInfo[len(m.RandBlkInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadBlocks = append(m.BadBlocks, &Cid{})
			if err := m.BadBlocks[len(m.BadBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardCid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardCid == nil {
				m.ShardCid = &Cid{}
			}
			if err := m.ShardCid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardSize", wireType)
			}
			m.ShardSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codec", wireType)
			}
			m.Codec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Codec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MinorBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinorBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinorBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevHash = append(m.PrevHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevHash == nil {
				m.PrevHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrxHashRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrxHashRoot = append(m.TrxHashRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.TrxHashRoot == nil {
				m.TrxHashRoot = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateDeltaHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateDeltaHash = append(m.StateDeltaHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StateDeltaHash == nil {
				m.StateDeltaHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CMBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CMBlockHash = append(m.CMBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CMBlockHash == nil {
				m.CMBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalPublicKey = append(m.ProposalPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposalPublicKey == nil {
				m.ProposalPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsData == nil {
				m.ConsData = &ConsensusData{}
			}
			if err := m.ConsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CMEpochNo", wireType)
			}
			m.CMEpochNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CMEpochNo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receipt == nil {
				m.Receipt = &BlockReceipt{}
			}
			if err := m.Receipt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field COSign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.COSign == nil {
				m.COSign = &COSign{}
			}
			if err := m.COSign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountMinor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountMinor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountMinor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountData = append(m.AccountData[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountData == nil {
				m.AccountData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MinorBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinorBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinorBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &MinorBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateDelta = append(m.StateDelta, &AccountMinor{})
			if err := m.StateDelta[len(m.StateDelta)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevHash = append(m.PrevHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevHash == nil {
				m.PrevHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsData == nil {
				m.ConsData = &ConsensusData{}
			}
			if err := m.ConsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderPubKey = append(m.LeaderPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.LeaderPubKey == nil {
				m.LeaderPubKey = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Candidate == nil {
				m.Candidate = &NodeInfo{}
			}
			if err := m.Candidate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardsHash = append(m.ShardsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardsHash == nil {
				m.ShardsHash = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field COSign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.COSign == nil {
				m.COSign = &COSign{}
			}
			if err := m.COSign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = append(m.Member, &NodeInfo{})
			if err := m.Member[len(m.Member)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddr = append(m.MemberAddr, &NodeAddr{})
			if err := m.MemberAddr[len(m.MemberAddr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &CMBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, &Shard{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevHash = append(m.PrevHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevHash == nil {
				m.PrevHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrxCount", wireType)
			}
			m.TrxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrxCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalPubKey = append(m.ProposalPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposalPubKey == nil {
				m.ProposalPubKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNo", wireType)
			}
			m.EpochNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CMBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CMBlockHash = append(m.CMBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CMBlockHash == nil {
				m.CMBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrxRootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrxRootHash = append(m.TrxRootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TrxRootHash == nil {
				m.TrxRootHash = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateDeltaRootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateDeltaRootHash = append(m.StateDeltaRootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StateDeltaRootHash == nil {
				m.StateDeltaRootHash = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorBlocksHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinorBlocksHash = append(m.MinorBlocksHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MinorBlocksHash == nil {
				m.MinorBlocksHash = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateHashRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateHashRoot = append(m.StateHashRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateHashRoot == nil {
				m.StateHashRoot = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsData == nil {
				m.ConsData = &ConsensusData{}
			}
			if err := m.ConsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field COSign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.COSign == nil {
				m.COSign = &COSign{}
			}
			if err := m.COSign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &FinalBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinorBlocks = append(m.MinorBlocks, &MinorBlockHeader{})
			if err := m.MinorBlocks[len(m.MinorBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *COSign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: COSign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: COSign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step1", wireType)
			}
			m.Step1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step1 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step2", wireType)
			}
			m.Step2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step2 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P2PRtSyncMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P2PRtSyncMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P2PRtSyncMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = append(m.Req[:0], dAtA[iNdEx:postIndex]...)
			if m.Req == nil {
				m.Req = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P2PRtSyncAckMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P2PRtSyncAckMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P2PRtSyncAckMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resp = append(m.Resp[:0], dAtA[iNdEx:postIndex]...)
			if m.Resp == nil {
				m.Resp = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &PeerInfo{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBlock
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlock(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlock = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlock   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("block.proto", fileDescriptorBlock) }

var fileDescriptorBlock = []byte{
	// 2532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xcd, 0x73, 0x1b, 0x49,
	0x15, 0x67, 0xa4, 0xd1, 0xd7, 0x93, 0xe4, 0x38, 0x5d, 0xa9, 0x2d, 0x2d, 0x59, 0x12, 0x67, 0x48,
	0x05, 0x13, 0x42, 0xd8, 0x75, 0xf8, 0x2a, 0x6e, 0xb6, 0x4c, 0x2a, 0xae, 0x5d, 0x7b, 0xb5, 0x2d,
	0x91, 0x3d, 0x50, 0x85, 0xab, 0xa5, 0x69, 0x5b, 0x83, 0xa4, 0xe9, 0xc9, 0xcc, 0x28, 0xb1, 0xf7,
	0xc0, 0x01, 0xa8, 0xe2, 0xc4, 0x85, 0x13, 0x07, 0x2e, 0x7b, 0xe1, 0x0f, 0xe0, 0xaf, 0xe0, 0xc0,
	0x81, 0x3f, 0x81, 0x0a, 0x27, 0x6e, 0xfc, 0x03, 0x54, 0x51, 0xef, 0x75, 0xf7, 0x4c, 0x8f, 0xd6,
	0xde, 0xb0, 0xb0, 0x07, 0x6e, 0xfd, 0x3e, 0xa6, 0x3f, 0xde, 0xfb, 0xbd, 0x8f, 0xee, 0x81, 0xee,
	0x74, 0xa9, 0x66, 0x8b, 0xc7, 0x49, 0xaa, 0x72, 0xc5, 0x6a, 0xc9, 0x34, 0xf8, 0x4b, 0x0d, 0x9a,
	0xcf, 0xa4, 0x08, 0x65, 0xca, 0x06, 0xd0, 0x7a, 0x29, 0xd3, 0x2c, 0x52, 0xf1, 0xc0, 0xdb, 0xf1,
	0x76, 0xfb, 0xdc, 0x92, 0xec, 0x1d, 0xe8, 0xe4, 0xd1, 0x4a, 0x66, 0xb9, 0x58, 0x25, 0x83, 0xda,
	0x8e, 0xb7, 0x5b, 0xe7, 0x25, 0x83, 0xbd, 0x05, 0xcd, 0xb9, 0x8c, 0xce, 0xe7, 0xf9, 0xa0, 0xbe,
	0xe3, 0xed, 0xfa, 0xdc, 0x50, 0xec, 0x36, 0x74, 0x92, 0x54, 0xbe, 0x3c, 0x9d, 0x8b, 0x6c, 0x3e,
	0xf0, 0x77, 0xbc, 0xdd, 0x1e, 0x6f, 0x23, 0xe3, 0x99, 0xc8, 0xe6, 0xec, 0x2e, 0x74, 0x57, 0x32,
	0x5d, 0x2c, 0xa5, 0x16, 0x37, 0x48, 0x0c, 0x9a, 0x45, 0x0a, 0x5f, 0x03, 0xc8, 0x72, 0x91, 0x1b,
	0x79, 0x93, 0xe4, 0x1d, 0xe2, 0x90, 0xf8, 0x07, 0xd0, 0x1f, 0xaa, 0x38, 0x93, 0x71, 0xb6, 0xce,
	0x0e, 0x45, 0x2e, 0x06, 0xed, 0x1d, 0x6f, 0xb7, 0xbb, 0x77, 0xf3, 0x71, 0x32, 0x7d, 0x5c, 0x11,
	0xf0, 0xaa, 0x1e, 0xbb, 0x05, 0x8d, 0x83, 0xa5, 0x52, 0xab, 0x01, 0xd0, 0x94, 0x9a, 0xc0, 0xb3,
	0x0f, 0xe7, 0x22, 0x8a, 0x8f, 0x0e, 0x07, 0x5d, 0xe2, 0x5b, 0x92, 0x31, 0xf0, 0x27, 0x97, 0x89,
	0x1c, 0xf4, 0xc8, 0x24, 0x34, 0x46, 0xed, 0x91, 0xb8, 0x5c, 0x2a, 0x11, 0x0e, 0xfa, 0x5a, 0xdb,
	0x90, 0xc1, 0x1f, 0x3c, 0x68, 0x6b, 0x73, 0x4e, 0x2e, 0x58, 0x60, 0x4d, 0x4b, 0xf6, 0xec, 0xee,
	0x01, 0x6e, 0x4e, 0x73, 0xb8, 0x35, 0xfa, 0x43, 0x68, 0x71, 0x39, 0x93, 0x51, 0x92, 0x93, 0x61,
	0xbb, 0x7b, 0xdb, 0xa8, 0x74, 0x80, 0x5e, 0x32, 0x7c, 0x6e, 0x15, 0xd8, 0x3d, 0xf0, 0xb3, 0xe8,
	0x3c, 0x1e, 0x34, 0x77, 0xea, 0xbb, 0xdd, 0xbd, 0x3e, 0x2a, 0x8e, 0xa3, 0xf3, 0x58, 0xe4, 0xeb,
	0x54, 0x72, 0x12, 0xa1, 0xd5, 0xc8, 0xc3, 0xda, 0x6a, 0x2d, 0x6d, 0x35, 0xe2, 0xa0, 0xd5, 0x82,
	0x10, 0x5a, 0x34, 0xf5, 0xe4, 0x82, 0xdd, 0x47, 0xaf, 0x39, 0x9b, 0xeb, 0x95, 0x9b, 0x9b, 0x5c,
	0x70, 0x23, 0x63, 0x4f, 0xa0, 0x97, 0xa7, 0x22, 0xce, 0xc4, 0x2c, 0x8f, 0x54, 0x9c, 0x0d, 0x7c,
	0x5a, 0xfa, 0x06, 0xea, 0x4e, 0x4a, 0x3e, 0xaf, 0x28, 0x05, 0x9b, 0xbe, 0x29, 0x6c, 0xe8, 0x39,
	0x36, 0x64, 0xe0, 0x93, 0xdf, 0x6a, 0xb4, 0x47, 0x1a, 0x07, 0x1f, 0x01, 0xec, 0x4f, 0xc5, 0xc1,
	0x59, 0x4e, 0x5f, 0xed, 0x40, 0xf7, 0x64, 0xbd, 0x9a, 0xca, 0x94, 0xab, 0x75, 0x1c, 0x9a, 0x8f,
	0x5d, 0x56, 0x61, 0x90, 0xda, 0xb5, 0x06, 0x09, 0xfe, 0xe1, 0x41, 0x67, 0x72, 0x61, 0xdc, 0xf3,
	0x39, 0x10, 0x67, 0xe0, 0x9f, 0xa5, 0x6a, 0x45, 0xdb, 0xf1, 0x39, 0x8d, 0x91, 0x27, 0xc2, 0x30,
	0x35, 0xb0, 0xa6, 0x31, 0xce, 0x90, 0x18, 0xd7, 0x6b, 0x48, 0x5b, 0x12, 0x81, 0x15, 0xab, 0x78,
	0x26, 0x09, 0xcb, 0x3e, 0xd7, 0x44, 0x35, 0x74, 0x9a, 0x9b, 0xa1, 0xc3, 0xc0, 0xcf, 0xd1, 0x30,
	0x2d, 0x6d, 0x18, 0x1c, 0xb3, 0x3b, 0x00, 0x23, 0x99, 0xae, 0xa2, 0x8c, 0xb6, 0xd9, 0xd6, 0x81,
	0x51, 0x72, 0x5c, 0xa8, 0x76, 0x2a, 0x50, 0x0d, 0xce, 0x00, 0x0e, 0x65, 0xb2, 0x54, 0x97, 0x47,
	0xf1, 0x99, 0x62, 0x5f, 0x85, 0xf6, 0xa1, 0xcc, 0x66, 0x69, 0x34, 0x95, 0x36, 0xfa, 0x2c, 0x8d,
	0x21, 0x8b, 0x4e, 0x78, 0xbe, 0xa2, 0xcd, 0xf6, 0xb9, 0xa1, 0x70, 0x3f, 0x43, 0x15, 0x4a, 0x13,
	0x6e, 0x34, 0x66, 0xdb, 0x50, 0xdf, 0x9f, 0x46, 0x06, 0x4b, 0x38, 0x0c, 0xee, 0x41, 0x67, 0x24,
	0x52, 0xb1, 0xb2, 0xf1, 0x44, 0x04, 0x19, 0xb4, 0xc7, 0x35, 0x11, 0x1c, 0x01, 0x1c, 0xc5, 0x2f,
	0xd5, 0x42, 0xd2, 0x56, 0xde, 0x82, 0xe6, 0xb1, 0xcc, 0xe7, 0x2a, 0x34, 0x4a, 0x86, 0x62, 0x5f,
	0xb7, 0xdf, 0x3a, 0x0e, 0x2c, 0x66, 0xb6, 0x53, 0xfd, 0xae, 0x06, 0xcc, 0xc5, 0x9a, 0x09, 0x06,
	0x06, 0x3e, 0x42, 0xda, 0xcc, 0x48, 0x63, 0xdc, 0xea, 0x30, 0x59, 0x93, 0x0f, 0x3d, 0x8e, 0x43,
	0xe4, 0x9c, 0x48, 0x9d, 0x98, 0x3c, 0x8e, 0x43, 0xdc, 0x0b, 0x97, 0xd9, 0x7a, 0x99, 0x1b, 0xa3,
	0x18, 0x0a, 0xe7, 0x7b, 0x8a, 0x00, 0xd0, 0xde, 0xa3, 0x31, 0xdb, 0x82, 0xda, 0x44, 0x91, 0x31,
	0x7c, 0x5e, 0x9b, 0x28, 0x74, 0xe6, 0x44, 0x2d, 0x64, 0x7c, 0x22, 0x56, 0xda, 0x67, 0x1d, 0x5e,
	0x32, 0xd0, 0xe0, 0xfb, 0xb3, 0x99, 0x5a, 0xc7, 0x79, 0x36, 0x68, 0xef, 0xd4, 0xd1, 0xe0, 0x96,
	0x46, 0xd9, 0x89, 0x7c, 0x45, 0xba, 0xc6, 0x6b, 0x05, 0x8d, 0x3b, 0xda, 0x5f, 0xa1, 0x9a, 0x49,
	0x49, 0x86, 0xc2, 0x6f, 0x46, 0xa9, 0x0a, 0xd7, 0x33, 0x99, 0x52, 0x52, 0xf2, 0x79, 0x41, 0x07,
	0x4f, 0xa1, 0xe7, 0xe6, 0x08, 0xd4, 0x25, 0x1a, 0x8f, 0xef, 0xd1, 0x61, 0x0b, 0xba, 0x90, 0xa1,
	0x21, 0x6a, 0x8e, 0xec, 0x44, 0xe6, 0xc1, 0x6f, 0x3c, 0xe8, 0x3a, 0xc6, 0x65, 0xdf, 0x28, 0xe1,
	0xad, 0xd3, 0x02, 0xf9, 0xa4, 0x08, 0xa0, 0x12, 0xed, 0x6f, 0x0e, 0x3d, 0xb4, 0x28, 0x65, 0xa1,
	0xba, 0xf6, 0x10, 0x8e, 0x11, 0xbc, 0x36, 0xdd, 0x99, 0xf0, 0x31, 0x64, 0xa0, 0x60, 0xab, 0x48,
	0x1a, 0x63, 0x4c, 0xf3, 0xd5, 0xd0, 0xf1, 0x36, 0x43, 0xe7, 0x5b, 0xd0, 0x9d, 0x2a, 0xb5, 0x58,
	0x48, 0x99, 0xc8, 0x34, 0x33, 0xfb, 0xe8, 0xe0, 0x3e, 0x8e, 0xa3, 0x58, 0xa6, 0xdc, 0x95, 0x5e,
	0xb5, 0x95, 0xe0, 0x36, 0x34, 0x48, 0xb3, 0x10, 0x7a, 0x8e, 0xf0, 0x63, 0xe8, 0x14, 0xc7, 0x41,
	0x07, 0x8d, 0xd6, 0xd3, 0xf7, 0xe5, 0xa5, 0x85, 0xaf, 0xa6, 0xf0, 0x30, 0xe3, 0xe8, 0xdc, 0xc9,
	0x62, 0x96, 0x74, 0x63, 0xb4, 0x5e, 0x8d, 0xd1, 0x9f, 0xc1, 0x96, 0xd0, 0xa0, 0x38, 0x7d, 0xa5,
	0xcb, 0xe4, 0x2d, 0x68, 0x88, 0x59, 0xae, 0x74, 0x1e, 0xf6, 0xb9, 0x26, 0x70, 0x4d, 0x2d, 0xa7,
	0xa9, 0xfb, 0xdc, 0x50, 0x98, 0x1d, 0x92, 0x32, 0x3b, 0xe8, 0xc9, 0x1d, 0x4e, 0xf0, 0x23, 0x80,
	0x85, 0xbc, 0xbc, 0x72, 0xee, 0xde, 0x1b, 0xe6, 0x0e, 0xfe, 0xe4, 0xb9, 0xa9, 0x87, 0xec, 0x3f,
	0x4f, 0x65, 0x36, 0x57, 0x4b, 0x9b, 0x7d, 0x4b, 0x06, 0x0b, 0xc0, 0x5f, 0xc8, 0x4b, 0x6b, 0xf8,
	0x2d, 0x34, 0x7c, 0xb9, 0x30, 0x27, 0x19, 0x7b, 0x0c, 0x6d, 0x61, 0x23, 0xa2, 0x4e, 0x7a, 0x0c,
	0xf5, 0xaa, 0x06, 0xe0, 0x85, 0x0e, 0x21, 0x5e, 0xa6, 0x2b, 0x0a, 0x2f, 0x93, 0xb2, 0x2c, 0x4d,
	0x4e, 0x10, 0xa9, 0x8c, 0x73, 0xd3, 0x2b, 0x18, 0x2a, 0xf8, 0x0e, 0xd4, 0xb9, 0x58, 0xe1, 0x49,
	0x3f, 0x5a, 0xab, 0x5c, 0x18, 0xf4, 0x6b, 0x02, 0x5d, 0xfb, 0x93, 0x4c, 0x86, 0x06, 0xf6, 0x34,
	0x0e, 0x7e, 0xe5, 0x41, 0x9d, 0xcb, 0x0c, 0x27, 0x1c, 0xe7, 0x62, 0x21, 0x43, 0x63, 0x78, 0x43,
	0x5d, 0xf5, 0x0d, 0x9a, 0x62, 0xff, 0xa5, 0x88, 0x96, 0x62, 0xba, 0x94, 0x26, 0x99, 0x94, 0x0c,
	0x5c, 0xfb, 0x83, 0x68, 0x15, 0x69, 0x48, 0x7b, 0x5c, 0x13, 0xf8, 0xcd, 0xa1, 0x5c, 0xca, 0x73,
	0x91, 0xcb, 0xd0, 0x64, 0x95, 0x92, 0x11, 0x1c, 0x62, 0x76, 0xd6, 0x04, 0x7e, 0x1f, 0xc5, 0xa1,
	0xbc, 0xb0, 0x08, 0x20, 0x02, 0x53, 0xd7, 0xcc, 0x24, 0x33, 0x9f, 0xe3, 0x10, 0x39, 0xb1, 0xb4,
	0x5d, 0x16, 0x0e, 0x71, 0x16, 0x9b, 0x12, 0xb0, 0x5c, 0x9a, 0x74, 0x43, 0xf6, 0xd3, 0x73, 0xb9,
	0x2c, 0x27, 0xd1, 0xe8, 0x49, 0x0d, 0x15, 0xbc, 0x0f, 0x8d, 0xe7, 0x2a, 0xd7, 0x26, 0xc9, 0x2a,
	0x26, 0xd1, 0x14, 0x7b, 0x08, 0x1d, 0xbb, 0x8c, 0x75, 0x38, 0xb5, 0x0b, 0x96, 0xc9, 0x4b, 0x71,
	0xf0, 0xcf, 0x1a, 0xb4, 0xcc, 0xa2, 0xec, 0x5d, 0xe8, 0x96, 0x78, 0xca, 0x06, 0x5e, 0x09, 0x95,
	0x92, 0xcd, 0x5d, 0x15, 0xf6, 0x10, 0xda, 0x43, 0x15, 0xe7, 0xa9, 0x98, 0xd9, 0x7e, 0x88, 0xd4,
	0xcb, 0xb2, 0xc6, 0x0b, 0x39, 0xbb, 0x07, 0x4d, 0x4a, 0xa0, 0x16, 0x5b, 0x14, 0xfc, 0xc4, 0xe1,
	0x46, 0x80, 0x96, 0x3d, 0x22, 0xcb, 0xfa, 0xda, 0xb2, 0x44, 0x50, 0x1a, 0x8f, 0x56, 0x72, 0x4c,
	0x89, 0xa5, 0xa1, 0x13, 0x4b, 0xc1, 0x28, 0x0a, 0x4b, 0xd3, 0x29, 0x2c, 0x6f, 0x13, 0xc8, 0x28,
	0xe5, 0x77, 0xf7, 0x5a, 0xb8, 0x0e, 0x17, 0x2b, 0x4e, 0xc0, 0x7b, 0x5b, 0xd7, 0x9c, 0xb6, 0x23,
	0x92, 0x99, 0x2e, 0x3e, 0x6f, 0xeb, 0xe2, 0xd3, 0xd9, 0x10, 0x61, 0x15, 0x7a, 0x58, 0x82, 0x23,
	0x1b, 0x40, 0x69, 0x51, 0xcb, 0x2c, 0xa1, 0x92, 0xb1, 0xbb, 0xc6, 0x3d, 0x54, 0x04, 0xcc, 0x31,
	0x89, 0xc1, 0x35, 0x3f, 0x78, 0x61, 0xca, 0x92, 0xad, 0xb5, 0xe3, 0xcb, 0xd5, 0x54, 0x2d, 0xc9,
	0x87, 0x1d, 0x6e, 0x28, 0x3c, 0xf4, 0xb1, 0xb8, 0x18, 0xaf, 0x93, 0x64, 0x79, 0x49, 0xa6, 0x6d,
	0xf0, 0x92, 0x41, 0x5f, 0x69, 0x51, 0x9d, 0x44, 0xcd, 0x92, 0x7f, 0x94, 0x65, 0x6b, 0x99, 0x1a,
	0x0b, 0x1a, 0x2a, 0xf8, 0x1e, 0x34, 0x74, 0xf1, 0x1a, 0x40, 0xeb, 0x40, 0x2c, 0x05, 0xf6, 0x3d,
	0x26, 0x07, 0x1a, 0x12, 0xed, 0x58, 0x04, 0x72, 0x87, 0xd3, 0x38, 0x38, 0x28, 0xdd, 0x8b, 0x99,
	0x6c, 0x9f, 0x8a, 0x8e, 0xd3, 0x1a, 0x3a, 0x1c, 0x5c, 0x7a, 0xa8, 0xe2, 0xb3, 0xe8, 0xdc, 0x4c,
	0x6c, 0xa8, 0xe0, 0xa7, 0xa6, 0x87, 0x1d, 0xe6, 0xff, 0x61, 0x0f, 0xfb, 0x10, 0x3a, 0x33, 0xb3,
	0xa8, 0x6d, 0x60, 0x7b, 0xe6, 0x9a, 0x40, 0x4c, 0x5e, 0x8a, 0x83, 0x19, 0xdc, 0x1c, 0xad, 0x97,
	0x4b, 0x5a, 0x20, 0xe3, 0xf2, 0xc5, 0x5a, 0x66, 0xfa, 0x22, 0x23, 0x65, 0x7a, 0xea, 0x54, 0x89,
	0x36, 0x32, 0x0c, 0x34, 0xda, 0x33, 0xcc, 0xed, 0xa7, 0x51, 0x68, 0xd2, 0x69, 0x8b, 0xe8, 0xa3,
	0xf0, 0xba, 0x8b, 0x51, 0xf0, 0x47, 0x0f, 0x98, 0xbb, 0x4a, 0x96, 0x60, 0xe1, 0xfb, 0xb2, 0x97,
	0xc1, 0x2b, 0x96, 0xbe, 0x0b, 0x50, 0x30, 0x1a, 0x07, 0xea, 0xeb, 0xc1, 0x90, 0xc2, 0xf3, 0x2e,
	0xf8, 0x21, 0x16, 0xaf, 0x06, 0xd9, 0xa4, 0x5b, 0x5c, 0x3c, 0x26, 0x17, 0x9c, 0x04, 0x41, 0x04,
	0x30, 0x5a, 0x67, 0x73, 0xbd, 0xcf, 0xca, 0x16, 0xbc, 0xea, 0x16, 0x36, 0x96, 0xaa, 0x5d, 0xbb,
	0x54, 0xfd, 0xba, 0xa5, 0x7e, 0xeb, 0xc1, 0xcd, 0xa2, 0xe2, 0x8e, 0x52, 0x49, 0xdf, 0x62, 0xfc,
	0xa6, 0x4e, 0xf3, 0xaf, 0x09, 0xe7, 0xc0, 0xa6, 0x7e, 0x99, 0x03, 0x97, 0x75, 0xba, 0x7e, 0x5d,
	0x9d, 0xf6, 0xaf, 0xad, 0xd3, 0x8d, 0x6a, 0x9d, 0xfe, 0x05, 0x80, 0x71, 0xff, 0xf8, 0x32, 0x66,
	0xf7, 0xa1, 0x6f, 0xa8, 0x67, 0x7a, 0x61, 0x9d, 0x1f, 0xab, 0x4c, 0x67, 0xfd, 0xda, 0x75, 0xeb,
	0xd7, 0xaf, 0x5d, 0xdf, 0xaf, 0xae, 0xff, 0x0a, 0x5a, 0x13, 0xb5, 0xce, 0x8f, 0xb3, 0x73, 0x4c,
	0xec, 0x74, 0xdd, 0xd1, 0x37, 0x1f, 0x9b, 0xd8, 0x1d, 0xd6, 0x97, 0xba, 0x70, 0x6e, 0xba, 0x45,
	0x3c, 0xf6, 0x03, 0x1c, 0x2f, 0xb2, 0xcb, 0xf8, 0xf4, 0xa5, 0x89, 0xb0, 0x8a, 0xe7, 0x5a, 0x5a,
	0xf8, 0xdc, 0xd1, 0x3b, 0x33, 0x59, 0xfb, 0x2a, 0xbd, 0xa7, 0x9f, 0xd3, 0x16, 0xfd, 0xba, 0x06,
	0xdb, 0xe3, 0x5c, 0xa5, 0x92, 0xcb, 0x44, 0x61, 0xfb, 0x87, 0x07, 0xff, 0x6f, 0x03, 0xe2, 0x36,
	0x74, 0x52, 0x99, 0xa8, 0xd3, 0x2c, 0xfa, 0x44, 0x9a, 0x98, 0x68, 0x23, 0x63, 0x1c, 0x7d, 0x22,
	0x11, 0xaa, 0x59, 0xae, 0x52, 0x71, 0x2e, 0x4f, 0x57, 0xc2, 0x16, 0x06, 0x30, 0xac, 0x63, 0x71,
	0x81, 0x0a, 0xf1, 0x7a, 0x75, 0xaa, 0xa6, 0x3f, 0x97, 0x98, 0x30, 0x74, 0xe5, 0x86, 0x78, 0xbd,
	0xfa, 0x50, 0x73, 0xd8, 0x7b, 0xd0, 0x4f, 0x45, 0x1c, 0x9e, 0x4e, 0x97, 0x8b, 0xd3, 0x28, 0x3e,
	0x53, 0x95, 0xfb, 0xf8, 0x5c, 0xa4, 0x21, 0xd5, 0xa9, 0x2e, 0xea, 0x1c, 0x2c, 0x17, 0x94, 0x94,
	0x1f, 0x00, 0x4c, 0x05, 0x7e, 0x81, 0x81, 0x34, 0x68, 0x91, 0x3e, 0x15, 0x84, 0x61, 0x14, 0xf2,
	0xce, 0x54, 0x84, 0x3a, 0xc4, 0x82, 0x11, 0x74, 0x8a, 0x19, 0xd8, 0x7d, 0xe8, 0x64, 0x48, 0x9c,
	0xce, 0x22, 0xdb, 0x8d, 0x17, 0xdf, 0xb4, 0x49, 0x32, 0x8c, 0x42, 0x7a, 0x27, 0x21, 0x2d, 0x3a,
	0xad, 0x8e, 0x3c, 0xfd, 0x1d, 0x1e, 0x37, 0x38, 0x82, 0x3a, 0x6a, 0x6d, 0x5c, 0x7c, 0xfd, 0xf2,
	0xe2, 0x7b, 0x0b, 0x1a, 0x33, 0x15, 0xca, 0x99, 0xf9, 0x54, 0x13, 0x57, 0x36, 0xcc, 0xff, 0xaa,
	0xc3, 0xf6, 0x71, 0x14, 0xab, 0x94, 0x36, 0x5b, 0x3e, 0x1a, 0x59, 0x97, 0x7a, 0xd5, 0x87, 0x93,
	0x01, 0xb4, 0x9e, 0x9b, 0x25, 0x8d, 0x7f, 0x0c, 0x89, 0x70, 0x7d, 0x56, 0x49, 0x58, 0x26, 0x7e,
	0x4c, 0x5d, 0xd6, 0x0d, 0xbf, 0x5f, 0xd6, 0x65, 0xdd, 0xf0, 0xd3, 0x75, 0x48, 0xbf, 0x1e, 0x99,
	0x60, 0x2d, 0x68, 0x0c, 0x91, 0x49, 0x7a, 0x81, 0x43, 0xae, 0x54, 0x6e, 0x4a, 0xb7, 0xcb, 0x62,
	0x0f, 0x60, 0x8b, 0x6e, 0x15, 0x87, 0x72, 0x99, 0x8b, 0x67, 0xe5, 0xe3, 0xc8, 0x06, 0x17, 0x67,
	0x1a, 0x1e, 0x1f, 0xd8, 0x07, 0x13, 0x73, 0xfd, 0x76, 0x59, 0xec, 0x11, 0xdc, 0x1c, 0xa5, 0x2a,
	0x51, 0x99, 0x58, 0x8e, 0xd6, 0xd3, 0x65, 0x34, 0xc3, 0xb8, 0xd3, 0x77, 0xba, 0xcf, 0x0a, 0xd8,
	0xb7, 0xa9, 0xe2, 0xe9, 0x27, 0x2a, 0xb8, 0xee, 0x89, 0xaa, 0x50, 0xa1, 0x88, 0x25, 0x00, 0x84,
	0x54, 0xed, 0xfb, 0xdc, 0x92, 0x68, 0x9c, 0xe1, 0xf1, 0x8f, 0x13, 0x35, 0x9b, 0x9f, 0x28, 0x7a,
	0x8c, 0xf2, 0x79, 0xc9, 0x70, 0x9f, 0x91, 0xfa, 0x6f, 0x7a, 0x46, 0xb2, 0x0d, 0xce, 0x96, 0xd3,
	0xe0, 0x04, 0xd0, 0x1c, 0x7e, 0x88, 0xf9, 0x77, 0xb0, 0x5d, 0x3e, 0x55, 0x69, 0x0e, 0x37, 0x92,
	0xe0, 0x10, 0x7a, 0xa6, 0xb1, 0x23, 0x14, 0x14, 0xaf, 0x3a, 0xe6, 0x79, 0x84, 0x8a, 0x76, 0xd9,
	0x84, 0x3a, 0xe9, 0xd6, 0x65, 0x05, 0x9f, 0x7a, 0x00, 0x25, 0x8a, 0xd8, 0xa3, 0x8d, 0x37, 0xb2,
	0x5b, 0xe6, 0x06, 0x57, 0x41, 0x59, 0xf1, 0x5a, 0xf6, 0x04, 0x7a, 0x13, 0xf7, 0x39, 0xaa, 0x76,
	0xcd, 0x73, 0x94, 0xab, 0xc4, 0xde, 0x05, 0x28, 0x9d, 0x6c, 0x2a, 0x10, 0x99, 0xc7, 0x3d, 0x0d,
	0x77, 0x74, 0x82, 0xe7, 0xd0, 0x3e, 0x51, 0xa1, 0x7e, 0xbb, 0x78, 0x07, 0x3a, 0xa5, 0x9b, 0x35,
	0xc4, 0x4b, 0x06, 0xfa, 0x6b, 0x3f, 0x0c, 0x53, 0x99, 0x65, 0x04, 0xf2, 0x0e, 0xb7, 0x24, 0x5a,
	0x67, 0xa4, 0x52, 0x0d, 0xf1, 0x0e, 0xa7, 0x71, 0xf0, 0xcb, 0x3a, 0xf4, 0x2d, 0x94, 0xfe, 0x9f,
	0xc2, 0xc7, 0x05, 0x69, 0xf3, 0xcd, 0x20, 0x0d, 0xa0, 0xf7, 0x01, 0x6d, 0xdf, 0x14, 0x1d, 0x1d,
	0x24, 0x15, 0x1e, 0xa6, 0x95, 0x13, 0x7a, 0x0d, 0xeb, 0xe8, 0xca, 0x4d, 0x04, 0xb6, 0x62, 0x43,
	0x11, 0x87, 0x51, 0x28, 0x72, 0x69, 0xc2, 0x81, 0x5a, 0x31, 0x6b, 0x6d, 0x5e, 0x8a, 0xb1, 0x3f,
	0x24, 0xec, 0x67, 0xb4, 0x65, 0xfd, 0x2a, 0xeb, 0x70, 0x0a, 0x18, 0xf7, 0xbe, 0x20, 0x8c, 0x7f,
	0xa8, 0x9d, 0xbb, 0x6f, 0x5e, 0xf3, 0xac, 0xfb, 0xbc, 0xab, 0xdd, 0x57, 0x73, 0xdc, 0xb7, 0x80,
	0x06, 0xad, 0xcf, 0xb6, 0xa0, 0x76, 0x64, 0x7b, 0x92, 0xda, 0x51, 0x88, 0x7d, 0xe8, 0xb1, 0xa4,
	0xe2, 0xec, 0x5c, 0x8e, 0x8a, 0x33, 0x19, 0x19, 0x7b, 0x04, 0xa0, 0x47, 0xfb, 0xfa, 0x51, 0xb1,
	0xa2, 0x89, 0x3c, 0xee, 0xc8, 0x83, 0x8f, 0xa1, 0x65, 0xa0, 0xc2, 0xbe, 0xb9, 0x11, 0x23, 0xda,
	0x39, 0xc7, 0x57, 0x05, 0xc8, 0x3d, 0x68, 0x6a, 0x13, 0xb9, 0x0f, 0x22, 0xc4, 0xe1, 0x46, 0x10,
	0x7c, 0xea, 0xc3, 0xf6, 0xd3, 0x28, 0x16, 0xcb, 0xff, 0x15, 0x87, 0x2e, 0xa2, 0xea, 0x1b, 0x88,
	0x2a, 0x31, 0xea, 0x5f, 0x8f, 0xd1, 0xc6, 0x15, 0x18, 0x9d, 0xa4, 0x17, 0xd4, 0x31, 0x12, 0x0e,
	0xfb, 0xbc, 0xa0, 0x31, 0x81, 0x3b, 0xd9, 0x15, 0x61, 0x67, 0x12, 0x78, 0x95, 0x8b, 0xfb, 0xb5,
	0x59, 0xb2, 0xad, 0x2b, 0x9d, 0xcd, 0x91, 0x1b, 0xa9, 0xbd, 0xf3, 0xd9, 0xd4, 0xae, 0xcb, 0x08,
	0xd6, 0x0b, 0xd2, 0x80, 0xa2, 0x8c, 0x58, 0x16, 0x7b, 0x0c, 0xac, 0xcc, 0x13, 0x85, 0xa2, 0x06,
	0xe7, 0x15, 0x12, 0xb6, 0x0b, 0x37, 0xca, 0x64, 0x96, 0x39, 0x78, 0xdd, 0x64, 0x63, 0x8b, 0x39,
	0xb6, 0x7f, 0x37, 0xa8, 0x88, 0xe9, 0x3f, 0x0b, 0x55, 0x66, 0x25, 0x52, 0xb7, 0xde, 0x1c, 0xa9,
	0x36, 0x46, 0x6e, 0x7c, 0xc1, 0x18, 0x49, 0x01, 0x4a, 0x88, 0x5c, 0x9d, 0xa3, 0x37, 0x21, 0x54,
	0x40, 0xf0, 0xfb, 0xd0, 0x75, 0xce, 0x66, 0x70, 0x78, 0x75, 0x5a, 0x77, 0x15, 0x83, 0xef, 0xda,
	0x7d, 0x61, 0xee, 0x18, 0xe7, 0x32, 0x79, 0xcf, 0x76, 0xfd, 0x44, 0x58, 0xee, 0x9e, 0x81, 0xa1,
	0x26, 0x82, 0x1d, 0xe8, 0x8d, 0xf6, 0x46, 0x1c, 0xbb, 0xf4, 0x19, 0xf6, 0x8c, 0xdb, 0x50, 0x4f,
	0xe5, 0x0b, 0x03, 0x62, 0x1c, 0x06, 0x7b, 0xd0, 0x1e, 0x49, 0x99, 0x52, 0x32, 0xdf, 0x82, 0x5a,
	0x64, 0x1f, 0xa1, 0x6b, 0x11, 0xdd, 0x24, 0xa2, 0x24, 0x29, 0xe3, 0xdc, 0x50, 0xc1, 0x11, 0xdc,
	0x28, 0x66, 0xdd, 0x9f, 0x2d, 0x70, 0x62, 0x06, 0x7e, 0x2a, 0xb3, 0xc4, 0xbe, 0x12, 0xe2, 0x98,
	0x05, 0xd0, 0xc0, 0x7e, 0xb4, 0xfa, 0x26, 0x62, 0xd6, 0xe2, 0x5a, 0x74, 0xb0, 0xfd, 0xe7, 0xd7,
	0x77, 0xbc, 0xbf, 0xbe, 0xbe, 0xe3, 0xfd, 0xed, 0xf5, 0x1d, 0xef, 0xf7, 0x7f, 0xbf, 0xf3, 0x95,
	0x69, 0x93, 0xfe, 0xbe, 0x3d, 0xf9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0xc0, 0x11, 0x66,
	0x8c, 0x1b, 0x00, 0x00,
}

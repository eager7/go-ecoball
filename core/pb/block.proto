// Copyright 2018 The go-ecoball Authors
// This file is part of the go-ecoball library.
//
// The go-ecoball library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ecoball library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ecoball library. If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";
package pb;

/**
** Signature Info
*/
message Signature {
    bytes       PubKey      = 1;
    bytes       SigData     = 2;
}
/**
** Consensus Data
*/
message ConData {
    uint32      Type                = 1;
    bytes       Data                = 2;
}

message BlockReceipt {
    double BlockCpu = 1;
    double BlockNet = 2;
}
/**
** Header info for compute hash
*/
message Header {
    uint32          version             = 1;
    bytes           ChainID             = 2;
    int64           timestamp           = 3;
    uint64          height              = 4;
    ConData         ConsensusData       = 5;
    bytes           prev_hash           = 6;
    bytes           merkle_hash         = 7;
    bytes           state_hash          = 8;
    bytes           Bloom               = 12;

    bytes           hash                = 9;
    repeated        Signature Signature = 10;
    BlockReceipt    Receipt             = 11;
}

/**
** Block info for sync with nodes
*/
message Block {
    Header          header                   = 1;
    repeated        Transaction transactions = 4;
}

/**
** Aba Consensus Data
*/
message AbaBftData {
    uint32      NumberRound         = 1;
    repeated    Signature   sign    = 2;
}
/**
** Transaction info for compute hash
*/
message TxPayload {
    uint32      version     = 1;
    bytes       ChainID     = 9;
    uint32      type        = 7;
    uint64      from        = 2;
    bytes       Permission  = 8;
    uint64      addr        = 3;
    bytes       payload     = 4; //store DeployInfo and InvokeInfo
    uint64      nonce       = 5;
    int64       timestamp   = 6;
}

message DeployInfo {
    uint32      TypeVm      = 5;
	bytes       Describe    = 4;
	bytes       Code        = 6;
	bytes       Abi         = 7;
}

message ParamData {
    bytes Param = 1;
}

message InvokeInfo {
    bytes       Method      = 1;
    repeated ParamData Param= 2;
}

message Transfer {
    string Token = 1;
    bytes  Value = 2;
}

message TransactionReceipt {
    bytes       Hash        = 1;
    double      Cpu         = 2;
    double      Net         = 3;
    bytes       Result      = 4;
    uint64      From        = 5;
    uint64      To          = 6;
    string      TokenName   = 7;
    bytes       Amount      = 10;
    bytes       NewToken    = 9;
    repeated bytes Accounts     = 8;
    uint64      Producer    = 11;
}

/**
** Transaction Info for Sync with nodes
*/
message Transaction {
    TxPayload               payload     = 1;
    repeated    Signature   sign        = 2;
    bytes                   hash        = 3;
    bytes                   Receipt     = 4;
}
/**
**
*/
message ConsensusState {
    bytes             hash =        3;
    repeated Miner    bookkeepers = 2;
    int64             timestamp   = 1;
}

message Miner {
    bytes hash = 1;
}

/**
** Account Permission
*/
message account_weight {
    uint64      actor       = 1;
    uint32      weight      = 2;
    bytes       permission  = 3;
}
message key_weight {
    bytes       actor       = 1;
    uint32      weight      = 2;
}
message Permission {
    bytes       PermName        = 4;
    bytes       Parent          = 5;
    uint32      threshold       = 1;
    repeated    key_weight keys = 2;
    repeated    account_weight accounts = 3;
}
message Ram {
    double Quota     = 1;
    double Used      = 2;
}
message Res {
    uint64 Staked    = 1;
    uint64 Delegated = 5;
    double  Used      = 2;
    double  Available = 3;
    double  Limit     = 4;
}
message Delegate {
    uint64 index    = 1;
    uint64 cpu      = 2;
    uint64 net      = 3;
}
message Producer {
    uint64 AccountName = 1;
    uint64 Amount = 2;
}
message Votes {
    uint64 staked = 1;
    repeated Producer Producers = 2;
}
/**
** Account Object
*/
message Account {
    uint64      Index                   = 4;
    int64       TimeStamp               = 5;
    repeated    Token      Tokens       = 3;
    repeated    Permission Permissions  = 1;
    DeployInfo  Contract                = 2;
    repeated    Delegate   Delegates    = 10;

    Res         Cpu                     = 8;
    Res         Net                     = 9;
    Votes       Votes                   = 11;

    Elector     Elector                 = 12;

    bytes       Hash                    = 6;
}
message Elector {
    uint64      Index   = 1;
    uint64      Amount  = 2;
    string      b64Pub  = 6;
    string      Address = 3;
    uint32      Port    = 4;
    uint64      Payee   = 5;
}
/**
** Tokens Info
*/
message TokenInfo {
    string      Symbol      = 1;
    bytes       MaxSupply   = 2;
    bytes       Supply      = 3;
    uint64      Creator     = 5;
    uint64      Issuer      = 4;
}

/**
** Account Token Info
*/
message Token {
    string      Name        = 4;
    bytes       Balance     = 2;
}

/**
** Smart Contract
*/
message Contract {
    uint32      ActionType  = 1;
    bytes       Config      = 2;
}

message BlockCt {
    Header      header                  = 1;
    repeated    Contract contracts      = 4;
}

/**
** Signature for the previous block
*/
message SignaturePreblock {
    bytes       ChainID     = 5;
    uint32      round       = 1;
    uint32      height      = 2;
    bytes       PubKey      = 3;
    bytes       SigData     = 4;
}

/**
** Synchronization Request
*/
message RequestSyn {
    bytes       ChainID        = 4;
    uint64      RequestHeight  = 1;
    bytes       PubKey         = 2;
    bytes       SigData        = 3;
}

/**
** Timeout Message
*/
message ToutMsg {
    bytes       ChainID        = 4;
    uint64      RoundNumber    = 1;
    bytes       PubKey         = 2;
    bytes       SigData        = 3;
}

/**
 ** Synchronization block
 */
 message BlockSyn {
     bytes      ChainID                    = 3;
     Block      Blksyn_v                   = 1;
     Block      Blksyn_f                   = 2;
 }


/**
** Shard info
*/
message ShardInfo {
	Cid     shard_cid   = 1;
	uint64  shard_size  = 2;
}

/**
** Shard cid
*/
message Cid {
    uint64  version = 1;
    uint64	codec   = 2;
    bytes   hash    = 3;
}

message BlockCacheKey {
    uint32  Type    = 1;
    uint32  ShardID = 2;
    uint64  Height  = 3;
}

message BlockCache {
    uint32  ShardID     = 1;
    bool    Finalizer   = 2;
    uint64  Height      = 3;
    uint32  HeaderType  = 4;
    bytes   Hash        = 5;
}
//Shard Block
message MinorBlockHeader {
    bytes       ChainID             = 1;
    uint32      Version             = 2;
    uint64      Height              = 3;
    int64       Timestamp           = 4;
    bytes       PrevHash            = 5;
    bytes       TrxHashRoot         = 6;
    bytes       StateDeltaHash      = 7;
    bytes       StateRootHash       = 17;
    bytes       CMBlockHash         = 8;
    bytes       ProposalPublicKey   = 9;
    uint32      ShardId             = 11;
    uint64      CMEpochNo           = 12;

    BlockReceipt Receipt            = 13;
    bytes       Hash                = 14;
    COSign  COSign              = 16;
}
message AccountMinor {
    bytes  AccountData = 4;
    uint64 Type = 3;
}
message MinorBlock {
    MinorBlockHeader Header = 1;
    repeated    Transaction Transactions = 2;
    repeated    AccountMinor StateDelta  = 3;
}

message NodeInfo {
    bytes   PublicKey   = 1;
    string  Address     = 2;
    string  Port        = 3;
}

message CMBlockHeader {
    bytes           ChainID         = 1;
    uint32          Version         = 2;
    uint64          Height          = 3;
    int64           Timestamp       = 4;
    bytes           PrevHash        = 5;
    bytes           LeaderPubKey    = 8;
    uint32          Nonce           = 9;
    NodeInfo        Candidate       = 10;
    bytes           ShardsHash      = 11;
    bytes           Hash            = 12;
    COSign  COSign              = 16;
}

message NodeAddr {
    string Address = 1;
    string Port    = 2;
}

message Shard {
    uint32   Id                  = 1;
    repeated NodeInfo Member     = 2;
    repeated NodeAddr MemberAddr = 3;
}

message CMBlock {
    CMBlockHeader  Header = 1;
    repeated Shard Shards = 2;
}

message FinalBlockHeader {
    bytes   ChainID             = 1;
    uint32  Version             = 2;
    bytes   PrevHash            = 3;
    uint64  Height              = 4;
    int64   Timestamp           = 5;
    uint32  TrxCount            = 6;
    bytes   ProposalPubKey      = 7;
    uint64  EpochNo             = 8;
    bytes   CMBlockHash         = 9;
    bytes   TrxRootHash         = 10;
    bytes   StateDeltaRootHash  = 11;
    bytes   MinorBlocksHash     = 12;
    bytes   StateHashRoot       = 13;

    bytes   Hash                = 15;
    COSign  COSign              = 16;
}

message FinalBlock {
    FinalBlockHeader            Header      = 1;
    repeated MinorBlockHeader MinorBlocks   = 2;
}

message ViewChangeBlockHeader {
    bytes       ChainID             = 1;
	uint32      Version             = 2;
    uint64      Height              = 3;
    int64       Timestamp           = 4;
	bytes       PrevHash            = 5;

    uint64      CMEpochNo           = 6;
    uint64      FinalBlockHeight    = 7;
    uint32      Round               = 8;
    NodeInfo    Candidate           = 9;

	bytes       hash                = 10;
	COSign      COSign              = 11;
}

message ViewChangeBlock {
    ViewChangeBlockHeader Header = 1;
}

message Payload {
    uint32 type = 1;
    bytes  data = 2;
}

message COSign {
    bytes           TPubKey = 1;
    uint32	        Step1   = 2;
    repeated bytes	Sign1   = 3;
    uint32	        Step2   = 4;
    repeated bytes	Sign2   = 5;
}


message P2PRtSyncMsg {
    bytes  req   = 1;
}

message PeerInfo {
    bytes  id     = 1;
    string ipport = 2;
}

message P2PRtSyncAckMsg {
    bytes              resp  = 1;
    repeated PeerInfo  peers = 2;
}

message curvePointPB {
	bytes  curvePoint = 1;
}

message SijPBShareDKG {
    int64                   index     = 1;
    int64                   epochNum  = 2;
    bytes                   Sij       = 3;
    repeated curvePointPB   PubPolyPB = 4;
}

message QualPBNLDKG {
     int64                   index     = 1;
     int64                   epochNum  = 2;
     repeated    int32       QUAL      = 3;
}

message QualPBLDKG {
     int64                   index     = 1;
     int64                   epochNum  = 2;
     repeated    int32       QUAL      = 3;
}
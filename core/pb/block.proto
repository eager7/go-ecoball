// Copyright 2018 The go-ecoball Authors
// This file is part of the go-ecoball library.
//
// The go-ecoball library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ecoball library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ecoball library. If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";
package pb;

/**
** Header info for compute hash
*/
message Header {
    uint32      Type                = 12;
    bytes       Payload             = 13;
    bytes       ChainID             = 11;
    uint32      version             = 1;
    int64       timestamp           = 2;
    uint64      height              = 3;
    ConsensusData ConsensusData     = 8;
    bytes       prev_hash           = 4;
    bytes       merkle_hash         = 5;
    bytes       state_hash          = 6;
    bytes       Bloom               = 10;
}
/**
** Header info for sync with nodes
*/
message HeaderTx {
    Header      Header              = 1;
    BlockReceipt Receipt            = 2;
    repeated    Signature   sign    = 6;
    bytes       block_hash          = 7;
}
message     CMBlockHeader {
    bytes       LeaderPubKey        = 1;
    bytes       CandidatePubKey     = 2;
    uint32      Nonce               = 3;
    bytes       ShardsHash          = 4;
}
message MinorBlockHeader {
    bytes       ProposalPublicKey   = 1;
    bytes       StateChangeHash     = 2;
    uint32      ShardId             = 3;
    uint64      CMEpochNo           = 4;
    bytes       CmBlockHash         = 5;
}
/**
** Block info for sync with nodes
*/
message BlockTx {
    HeaderTx    header                   = 1;
    repeated    Transaction transactions = 4;
}
/**
** Consensus Data
*/
message ConsensusData {
    uint32      Type                = 1;
    bytes       Data                = 2;
}
/**
** Aba Consensus Data
*/
message AbaBftData {
    uint32      NumberRound         = 1;
    repeated    Signature   sign    = 2;
}
/**
** Transaction info for compute hash
*/
message TxPayload {
    uint32      version     = 1;
    bytes       ChainID     = 9;
    uint32      type        = 7;
    uint64      from        = 2;
    bytes       Permission  = 8;
    uint64      addr        = 3;
    bytes       payload     = 4; //store DeployInfo and InvokeInfo
    uint64      nonce       = 5;
    int64       timestamp   = 6;
}

message DeployInfo {
    uint32      TypeVm      = 5;
	bytes       Describe    = 4;
	bytes       Code        = 6;
	bytes       Abi         = 7;
}

message ParamData {
    bytes Param = 1;
}

message InvokeInfo {
    bytes       Method      = 1;
    repeated ParamData Param= 2;
}

message TransactionReceipt {
    bytes       Hash        = 1;
    double      Cpu         = 2;
    double      Net         = 3;
    bytes       Result      = 4;
}
message BlockReceipt {
    double BlockCpu = 1;
    double BlockNet = 2;
}
/**
** Transaction Info for Sync with nodes
*/
message Transaction {
    TxPayload               payload     = 1;
    repeated    Signature   sign        = 2;
    bytes                   hash        = 3;
    TransactionReceipt                 Receipt     = 4;
}
/**
**
*/
message ConsensusState {
    bytes             hash =        3;
    repeated Miner    bookkeepers = 2;
    int64             timestamp   = 1;
}

message Miner {
    bytes hash = 1;
}

/**
** Signature Info
*/
message Signature {
    bytes       ChainID     = 3;
    bytes       PubKey      = 1;
    bytes       SigData     = 2;
}

/**
** Account Permission
*/
message account_weight {
    uint64      actor       = 1;
    uint32      weight      = 2;
    bytes       permission  = 3;
}
message key_weight {
    bytes       actor       = 1;
    uint32      weight      = 2;
}
message Permission {
    bytes       PermName        = 4;
    bytes       Parent          = 5;
    uint32      threshold       = 1;
    repeated    key_weight keys = 2;
    repeated    account_weight accounts = 3;
}
message Ram {
    double Quota     = 1;
    double Used      = 2;
}
message Res {
    uint64 Staked    = 1;
    uint64 Delegated = 5;
    double  Used      = 2;
    double  Available = 3;
    double  Limit     = 4;
}
message Delegate {
    uint64 index    = 1;
    uint64 cpu      = 2;
    uint64 net      = 3;
}
message Producer {
    uint64 AccountName = 1;
    uint64 Amount = 2;
}
message Votes {
    uint64 staked = 1;
    repeated Producer Producers = 2;
}
/**
** Account Object
*/
message Account {
    uint64      Index                   = 4;
    int64       TimeStamp               = 5;
    repeated    Token      Tokens       = 3;
    repeated    Permission Permissions  = 1;
    DeployInfo  Contract                = 2;
    repeated    Delegate   Delegates    = 10;

    Ram         Ram                     = 7;
    Res         Cpu                     = 8;
    Res         Net                     = 9;
    Votes       Votes                   = 11;

    bytes       Hash                    = 6;
}
/**
** Account Info
*/
message Token {
    string      Name        = 4;
    bytes       Balance     = 2;
}

/**
** Smart Contract
*/
message Contract {
    uint32      ActionType  = 1;
    bytes       Config      = 2;
}

message BlockCt {
    HeaderTx    header                  = 1;
    repeated    Contract contracts      = 4;
}

/**
** Gossip Pull Blocks request
*/
message PullBlocksRequest {
	bytes   peer_hash    = 1;
	uint32  chain_id     = 2;
	uint64  height       = 3;
}

/**
** Gossip Pull Blocks response
*/
message PullBlocksResponse {
	bytes   peer_hash      = 1;
	uint32  chain_id       = 2;
	uint64  height         = 3;
	uint64  block_count    = 4;
	repeated BlockTx data  = 5;
}

/**
** Gossip  Push Blocks
*/
message PushBlocks {
	uint32  chain_id        = 1;
    uint64  block_count     = 2;
    repeated BlockTx data   = 3;
}

/**
** Signature for the previous block
*/
message SignaturePreblock {
    bytes       ChainID     = 5;
    uint32      round       = 1;
    uint32      height      = 2;
    bytes       PubKey      = 3;
    bytes       SigData     = 4;
}

/**
** Synchronization Request
*/
message RequestSyn {
    bytes       ChainID        = 4;
    uint64      RequestHeight  = 1;
    bytes       PubKey         = 2;
    bytes       SigData        = 3;
}

/**
** Timeout Message
*/
message ToutMsg {
    bytes       ChainID        = 4;
    uint64      RoundNumber    = 1;
    bytes       PubKey         = 2;
    bytes       SigData        = 3;
}

/**
 ** Synchronization block
 */
 message BlockSyn {
     bytes      ChainID                    = 3;
     BlockTx    Blksyn_v                   = 1;
     BlockTx    Blksyn_f                   = 2;
 }

/**
** Store Repo Stat Message
*/
message StoreRepoStatMsg {
    bytes   peer_hash                = 1;
    uint32  chain_id                 = 2;
    uint64  repo_size                = 3;
    uint64  storage_max              = 4;
    uint64  num_objects              = 5;
    repeated ShardInfo rand_blk_info = 6;
    repeated Cid bad_blocks          = 7;
}

/**
** Shard info
*/
message ShardInfo {
	Cid     shard_cid   = 1;
	uint64  shard_size  = 2;
}

/**
** Shard cid
*/
message Cid {
    uint64  version = 1;
    uint64	codec   = 2;
    bytes   hash    = 3;
}